Copying settings/filter_settings.py to src/django-filter/tests/settings.py
Running ./runtests.py --settings tests.settings --parallel 1 --verbosity 3 --debug-sql --noinput
Creating test database for alias 'default' ('test_djangotests')...
Found 519 test(s).
Operations to perform:
  Synchronize unmigrated apps: django_filters, drf_test_app, messages, rest_framework, staticfiles, tests
  Apply all migrations: admin, auth, contenttypes
Running pre-migrate handlers for application contenttypes
Running pre-migrate handlers for application admin
Running pre-migrate handlers for application auth
Running pre-migrate handlers for application drf_test_app
Running pre-migrate handlers for application tests
Synchronizing apps without migrations:
  Creating tables...
    Creating table drf_test_app_basicmodel
    Creating table drf_test_app_basefilterableitem
    Creating table drf_test_app_filterableitem
    Creating table drf_test_app_djangofilterorderingmodel
    Creating table drf_test_app_categoryitem
    Creating table tests_user
    Creating table tests_managergroup
    Creating table tests_comment
    Creating table tests_article
    Creating table tests_book
    Creating table tests_restaurant
    Creating table tests_networksetting
    Creating table tests_company
    Creating table tests_location
    Creating table tests_account
    Creating table tests_profile
    Creating table tests_bankaccount
    Creating table tests_node
    Creating table tests_directednode
    Creating table tests_worker
    Creating table tests_hiredworker
    Creating table tests_business
    Creating table tests_uuidtestmodel
    Creating table tests_spacewalkrecord
    Running deferred SQL...
Running migrations:
  Applying contenttypes.0001_initial... OK (0.068s)
  Applying auth.0001_initial... OK (0.428s)
  Applying admin.0001_initial... OK (0.066s)
Running post-migrate handlers for application contenttypes
Adding content type 'contenttypes | contenttype'
Adding permission 'Permission object (67ddc19372359784306a24a4)'
Adding permission 'Permission object (67ddc19372359784306a24a5)'
Adding permission 'Permission object (67ddc19372359784306a24a6)'
Adding permission 'Permission object (67ddc19372359784306a24a7)'
Running post-migrate handlers for application admin
Adding content type 'admin | logentry'
Adding permission 'Permission object (67ddc19372359784306a24a9)'
Adding permission 'Permission object (67ddc19372359784306a24aa)'
Adding permission 'Permission object (67ddc19372359784306a24ab)'
Adding permission 'Permission object (67ddc19372359784306a24ac)'
Running post-migrate handlers for application auth
Adding content type 'auth | user'
Adding content type 'auth | group'
Adding content type 'auth | permission'
Adding permission 'Permission object (67ddc19372359784306a24b0)'
Adding permission 'Permission object (67ddc19372359784306a24b1)'
Adding permission 'Permission object (67ddc19372359784306a24b2)'
Adding permission 'Permission object (67ddc19372359784306a24b3)'
Adding permission 'Permission object (67ddc19372359784306a24b4)'
Adding permission 'Permission object (67ddc19372359784306a24b5)'
Adding permission 'Permission object (67ddc19372359784306a24b6)'
Adding permission 'Permission object (67ddc19372359784306a24b7)'
Adding permission 'Permission object (67ddc19372359784306a24b8)'
Adding permission 'Permission object (67ddc19372359784306a24b9)'
Adding permission 'Permission object (67ddc19372359784306a24ba)'
Adding permission 'Permission object (67ddc19372359784306a24bb)'
Running post-migrate handlers for application drf_test_app
Adding content type 'drf_test_app | basicmodel'
Adding content type 'drf_test_app | basefilterableitem'
Adding content type 'drf_test_app | filterableitem'
Adding content type 'drf_test_app | djangofilterorderingmodel'
Adding content type 'drf_test_app | categoryitem'
Adding permission 'Permission object (67ddc19372359784306a24c1)'
Adding permission 'Permission object (67ddc19372359784306a24c2)'
Adding permission 'Permission object (67ddc19372359784306a24c3)'
Adding permission 'Permission object (67ddc19372359784306a24c4)'
Adding permission 'Permission object (67ddc19372359784306a24c5)'
Adding permission 'Permission object (67ddc19372359784306a24c6)'
Adding permission 'Permission object (67ddc19372359784306a24c7)'
Adding permission 'Permission object (67ddc19372359784306a24c8)'
Adding permission 'Permission object (67ddc19372359784306a24c9)'
Adding permission 'Permission object (67ddc19372359784306a24ca)'
Adding permission 'Permission object (67ddc19372359784306a24cb)'
Adding permission 'Permission object (67ddc19372359784306a24cc)'
Adding permission 'Permission object (67ddc19372359784306a24cd)'
Adding permission 'Permission object (67ddc19372359784306a24ce)'
Adding permission 'Permission object (67ddc19372359784306a24cf)'
Adding permission 'Permission object (67ddc19372359784306a24d0)'
Adding permission 'Permission object (67ddc19372359784306a24d1)'
Adding permission 'Permission object (67ddc19372359784306a24d2)'
Adding permission 'Permission object (67ddc19372359784306a24d3)'
Adding permission 'Permission object (67ddc19372359784306a24d4)'
Running post-migrate handlers for application tests
Adding content type 'tests | user'
Adding content type 'tests | managergroup'
Adding content type 'tests | adminuser'
Adding content type 'tests | comment'
Adding content type 'tests | article'
Adding content type 'tests | book'
Adding content type 'tests | restaurant'
Adding content type 'tests | networksetting'
Adding content type 'tests | company'
Adding content type 'tests | location'
Adding content type 'tests | account'
Adding content type 'tests | profile'
Adding content type 'tests | bankaccount'
Adding content type 'tests | node'
Adding content type 'tests | directednode'
Adding content type 'tests | worker'
Adding content type 'tests | hiredworker'
Adding content type 'tests | business'
Adding content type 'tests | uuidtestmodel'
Adding content type 'tests | spacewalkrecord'
Adding permission 'Permission object (67ddc19372359784306a24e9)'
Adding permission 'Permission object (67ddc19372359784306a24ea)'
Adding permission 'Permission object (67ddc19372359784306a24eb)'
Adding permission 'Permission object (67ddc19372359784306a24ec)'
Adding permission 'Permission object (67ddc19372359784306a24ed)'
Adding permission 'Permission object (67ddc19372359784306a24ee)'
Adding permission 'Permission object (67ddc19372359784306a24ef)'
Adding permission 'Permission object (67ddc19372359784306a24f0)'
Adding permission 'Permission object (67ddc19372359784306a24f1)'
Adding permission 'Permission object (67ddc19372359784306a24f2)'
Adding permission 'Permission object (67ddc19372359784306a24f3)'
Adding permission 'Permission object (67ddc19372359784306a24f4)'
Adding permission 'Permission object (67ddc19372359784306a24f5)'
Adding permission 'Permission object (67ddc19372359784306a24f6)'
Adding permission 'Permission object (67ddc19372359784306a24f7)'
Adding permission 'Permission object (67ddc19372359784306a24f8)'
Adding permission 'Permission object (67ddc19372359784306a24f9)'
Adding permission 'Permission object (67ddc19372359784306a24fa)'
Adding permission 'Permission object (67ddc19372359784306a24fb)'
Adding permission 'Permission object (67ddc19372359784306a24fc)'
Adding permission 'Permission object (67ddc19372359784306a24fd)'
Adding permission 'Permission object (67ddc19372359784306a24fe)'
Adding permission 'Permission object (67ddc19372359784306a24ff)'
Adding permission 'Permission object (67ddc19372359784306a2500)'
Adding permission 'Permission object (67ddc19372359784306a2501)'
Adding permission 'Permission object (67ddc19372359784306a2502)'
Adding permission 'Permission object (67ddc19372359784306a2503)'
Adding permission 'Permission object (67ddc19372359784306a2504)'
Adding permission 'Permission object (67ddc19372359784306a2505)'
Adding permission 'Permission object (67ddc19372359784306a2506)'
Adding permission 'Permission object (67ddc19372359784306a2507)'
Adding permission 'Permission object (67ddc19372359784306a2508)'
Adding permission 'Permission object (67ddc19372359784306a2509)'
Adding permission 'Permission object (67ddc19372359784306a250a)'
Adding permission 'Permission object (67ddc19372359784306a250b)'
Adding permission 'Permission object (67ddc19372359784306a250c)'
Adding permission 'Permission object (67ddc19372359784306a250d)'
Adding permission 'Permission object (67ddc19372359784306a250e)'
Adding permission 'Permission object (67ddc19372359784306a250f)'
Adding permission 'Permission object (67ddc19372359784306a2510)'
Adding permission 'Permission object (67ddc19372359784306a2511)'
Adding permission 'Permission object (67ddc19372359784306a2512)'
Adding permission 'Permission object (67ddc19372359784306a2513)'
Adding permission 'Permission object (67ddc19372359784306a2514)'
Adding permission 'Permission object (67ddc19372359784306a2515)'
Adding permission 'Permission object (67ddc19372359784306a2516)'
Adding permission 'Permission object (67ddc19372359784306a2517)'
Adding permission 'Permission object (67ddc19372359784306a2518)'
Adding permission 'Permission object (67ddc19372359784306a2519)'
Adding permission 'Permission object (67ddc19372359784306a251a)'
Adding permission 'Permission object (67ddc19372359784306a251b)'
Adding permission 'Permission object (67ddc19372359784306a251c)'
Adding permission 'Permission object (67ddc19372359784306a251d)'
Adding permission 'Permission object (67ddc19372359784306a251e)'
Adding permission 'Permission object (67ddc19372359784306a251f)'
Adding permission 'Permission object (67ddc19372359784306a2520)'
Adding permission 'Permission object (67ddc19372359784306a2521)'
Adding permission 'Permission object (67ddc19372359784306a2522)'
Adding permission 'Permission object (67ddc19372359784306a2523)'
Adding permission 'Permission object (67ddc19372359784306a2524)'
Adding permission 'Permission object (67ddc19372359784306a2525)'
Adding permission 'Permission object (67ddc19372359784306a2526)'
Adding permission 'Permission object (67ddc19372359784306a2527)'
Adding permission 'Permission object (67ddc19372359784306a2528)'
Adding permission 'Permission object (67ddc19372359784306a2529)'
Adding permission 'Permission object (67ddc19372359784306a252a)'
Adding permission 'Permission object (67ddc19372359784306a252b)'
Adding permission 'Permission object (67ddc19372359784306a252c)'
Adding permission 'Permission object (67ddc19372359784306a252d)'
Adding permission 'Permission object (67ddc19372359784306a252e)'
Adding permission 'Permission object (67ddc19372359784306a252f)'
Adding permission 'Permission object (67ddc19372359784306a2530)'
Adding permission 'Permission object (67ddc19372359784306a2531)'
Adding permission 'Permission object (67ddc19372359784306a2532)'
Adding permission 'Permission object (67ddc19372359784306a2533)'
Adding permission 'Permission object (67ddc19372359784306a2534)'
Adding permission 'Permission object (67ddc19372359784306a2535)'
Adding permission 'Permission object (67ddc19372359784306a2536)'
Adding permission 'Permission object (67ddc19372359784306a2537)'
Adding permission 'Permission object (67ddc19372359784306a2538)'
System check identified no issues (0 silenced).
test_autofilter_meta_inheritance (tests.rest_framework.test_backends.AutoFilterSetTests.test_autofilter_meta_inheritance) ... ok
----------------------------------------------------------------------
test_filter_queryset_none_filter_class (tests.rest_framework.test_backends.DjangoFilterBackendTestCase.test_filter_queryset_none_filter_class) ... ok
----------------------------------------------------------------------
test_get_filterset_none_filter_class (tests.rest_framework.test_backends.DjangoFilterBackendTestCase.test_get_filterset_none_filter_class) ... ok
----------------------------------------------------------------------
test_template_crispy (tests.rest_framework.test_backends.DjangoFilterBackendTestCase.test_template_crispy) ... ok
----------------------------------------------------------------------
test_to_html_none_filter_class (tests.rest_framework.test_backends.DjangoFilterBackendTestCase.test_to_html_none_filter_class) ... ok
----------------------------------------------------------------------
test_filterset_class (tests.rest_framework.test_backends.GetFilterClassTests.test_filterset_class) ... ok
----------------------------------------------------------------------
test_filterset_class_no_meta (tests.rest_framework.test_backends.GetFilterClassTests.test_filterset_class_no_meta) ... ok
----------------------------------------------------------------------
test_filterset_class_no_queryset (tests.rest_framework.test_backends.GetFilterClassTests.test_filterset_class_no_queryset) ... ok
----------------------------------------------------------------------
test_filterset_fields (tests.rest_framework.test_backends.GetFilterClassTests.test_filterset_fields) ... ok
----------------------------------------------------------------------
test_filterset_fields_malformed (tests.rest_framework.test_backends.GetFilterClassTests.test_filterset_fields_malformed) ... ok
----------------------------------------------------------------------
test_filterset_fields_no_queryset (tests.rest_framework.test_backends.GetFilterClassTests.test_filterset_fields_no_queryset) ... ok
----------------------------------------------------------------------
test_DTL_missing (tests.rest_framework.test_backends.TemplateTests.test_DTL_missing) ... ok
----------------------------------------------------------------------
test_backend_output (tests.rest_framework.test_backends.TemplateTests.test_backend_output)
Ensure backend renders default if template path does not exist ... ok
----------------------------------------------------------------------
test_multiple_engines (tests.rest_framework.test_backends.TemplateTests.test_multiple_engines) ... ok
----------------------------------------------------------------------
test_template_path (tests.rest_framework.test_backends.TemplateTests.test_template_path) ... ok
----------------------------------------------------------------------
test_errors (tests.rest_framework.test_backends.ValidationErrorTests.test_errors) ... ok
----------------------------------------------------------------------
test_widget (tests.rest_framework.test_filters.BooleanFilterTests.test_widget) ... ok
----------------------------------------------------------------------
test_imports (tests.rest_framework.test_filters.ModuleImportTests.test_imports) ... ok
----------------------------------------------------------------------
test_crispy_helper (tests.rest_framework.test_filterset.CrispyFormsCompatTests.test_crispy_helper) ... skipped 'django_crispy_forms must be installed'
----------------------------------------------------------------------
test_form_initialization (tests.rest_framework.test_filterset.CrispyFormsCompatTests.test_form_initialization) ... skipped 'django_crispy_forms must be installed'
----------------------------------------------------------------------
test_booleanfilter_widget (tests.rest_framework.test_filterset.FilterSetFilterForFieldTests.test_booleanfilter_widget) ... ok
----------------------------------------------------------------------
test_booleanfilter_widget_nullbooleanfield (tests.rest_framework.test_filterset.FilterSetFilterForFieldTests.test_booleanfilter_widget_nullbooleanfield) ... ok
----------------------------------------------------------------------
test_isodatetimefilter (tests.rest_framework.test_filterset.FilterSetFilterForFieldTests.test_isodatetimefilter) ... ok
----------------------------------------------------------------------
test_default_ordering (tests.rest_framework.test_integration.DjangoFilterOrderingTests.test_default_ordering) ... ERROR
(0.004) db.drf_test_app_djangofilterorderingmodel.insert_many([{'date': datetime.datetime(2012, 10, 8, 0, 0), 'text': 'abc'}])
(0.001) db.drf_test_app_djangofilterorderingmodel.insert_many([{'date': datetime.datetime(2013, 10, 8, 0, 0), 'text': 'bcd'}])
(0.001) db.drf_test_app_djangofilterorderingmodel.insert_many([{'date': datetime.datetime(2014, 10, 8, 0, 0), 'text': 'cde'}])
(0.001) db.drf_test_app_djangofilterorderingmodel.aggregate([{'$match': {'$expr': {}}}, {'$addFields': {'date': '$date'}}, {'$sort': SON([('date', -1)])}])
----------------------------------------------------------------------
test_get_filtered_detail_view (tests.rest_framework.test_integration.IntegrationTestDetailFiltering.test_get_filtered_detail_view)
GET requests to filtered RetrieveAPIView that have a filterset_class ... ERROR
(0.006) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a3236'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a3238'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a323a'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a323c'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a323e'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a3240'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a3242'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a3244'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a3246'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a3248'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}])
(0.004) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
(0.002) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}, {'$limit': 1}])
----------------------------------------------------------------------
test_base_model_filter (tests.rest_framework.test_integration.IntegrationTestFiltering.test_base_model_filter)
The `get_filterset_class` model checks should allow base model filters. ... ERROR
(0.007) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32e1'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32e3'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32e5'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32e7'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}])
(0.002) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32e9'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32eb'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32ed'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32ef'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32f1'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32f3'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}])
(0.004) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
(0.007) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {'$eq': ['$drf_test_app_basefilterableitem.text', 'aaa']}}}])
----------------------------------------------------------------------
test_filter_with_get_queryset_only (tests.rest_framework.test_integration.IntegrationTestFiltering.test_filter_with_get_queryset_only)
Regression test for #834. ... ERROR
(0.005) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a338c'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a338e'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3390'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3392'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3394'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3396'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3398'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}])
(0.003) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a339a'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a339c'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a339e'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}])
(0.003) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
(0.004) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_filter_with_queryset (tests.rest_framework.test_integration.IntegrationTestFiltering.test_filter_with_queryset)
Regression test for #814. ... ERROR
(0.006) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3437'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3439'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a343b'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a343d'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a343f'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3441'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3443'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3445'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3447'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3449'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}])
(0.002) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
(0.001) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {'$eq': ['$decimal', Decimal128('2.25')]}}}])
----------------------------------------------------------------------
test_get_filtered_class_root_view (tests.rest_framework.test_integration.IntegrationTestFiltering.test_get_filtered_class_root_view)
GET requests to filtered ListCreateAPIView that have a filterset_class set ... ERROR
(0.004) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34e2'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34e4'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34e6'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34e8'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34ea'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34ec'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34ee'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34f0'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34f2'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34f4'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}])
(0.003) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
(0.002) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_get_filtered_fields_root_view (tests.rest_framework.test_integration.IntegrationTestFiltering.test_get_filtered_fields_root_view)
GET requests to paginated ListCreateAPIView should return paginated results. ... ERROR
(0.007) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a358d'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a358f'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3591'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}])
(0.002) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3593'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3595'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}])
(0.002) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3597'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3599'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a359b'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a359d'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a359f'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}])
(0.003) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
(0.003) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_html_rendering (tests.rest_framework.test_integration.IntegrationTestFiltering.test_html_rendering)
Make sure response renders w/ backend ... ERROR
(0.004) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3638'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a363a'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a363c'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a363e'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3640'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3642'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3644'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3646'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3648'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a364a'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}])
(0.003) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
(0.003) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_incorrectly_configured_filter (tests.rest_framework.test_integration.IntegrationTestFiltering.test_incorrectly_configured_filter)
An error should be displayed when the filter class is misconfigured. ... ok
(0.008) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}])
(0.004) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a36e3'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a36e5'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a36e7'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a36e9'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a36eb'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a36ed'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}])
(0.002) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}])
(0.002) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a36ef'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a36f1'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a36f3'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a36f5'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}])
(0.004) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_permissive (tests.rest_framework.test_integration.IntegrationTestFiltering.test_permissive)
Permissive handling should return a partially filtered result set. ... ERROR
(0.004) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a378e'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}])
(0.003) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a3790'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a3792'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a3794'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a3796'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a3798'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a379a'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a379c'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a379e'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a37a0'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}])
(0.004) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': ''}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a37a2'), 'decimal': Decimal128('1.23'), 'date': datetime.datetime(2017, 1, 1, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': ''}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a37a4'), 'decimal': Decimal128('1.23'), 'date': datetime.datetime(2016, 1, 1, 0, 0)}])
(0.002) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {'$eq': ['$date', datetime.datetime(2017, 1, 1, 0, 0)]}}}])
----------------------------------------------------------------------
test_raise_validation_error (tests.rest_framework.test_integration.IntegrationTestFiltering.test_raise_validation_error)
Ensure validation errors return a proper error response instead of ... ok
(0.006) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a383d'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a383f'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a3841'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a3843'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a3845'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a3847'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a3849'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a384b'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}])
(0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a384d'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a384f'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}])
(0.003) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_unknown_filter (tests.rest_framework.test_integration.IntegrationTestFiltering.test_unknown_filter)
GET requests with filters that aren't configured should return 200. ... ERROR
(0.005) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38e8'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38ea'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}])
(0.002) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38ec'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38ee'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}])
(0.003) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38f0'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38f2'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38f4'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38f6'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}])
(0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38f8'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}])
(0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}])
(0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38fa'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}])
(0.004) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
(0.003) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_default_lookup_expr (tests.test_conf.DefaultSettingsTests.test_default_lookup_expr) ... ok
----------------------------------------------------------------------
test_disable_help_text (tests.test_conf.DefaultSettingsTests.test_disable_help_text) ... ok
----------------------------------------------------------------------
test_empty_choice_label (tests.test_conf.DefaultSettingsTests.test_empty_choice_label) ... ok
----------------------------------------------------------------------
test_null_choice_label (tests.test_conf.DefaultSettingsTests.test_null_choice_label) ... ok
----------------------------------------------------------------------
test_null_choice_value (tests.test_conf.DefaultSettingsTests.test_null_choice_value) ... ok
----------------------------------------------------------------------
test_verbose_lookups (tests.test_conf.DefaultSettingsTests.test_verbose_lookups) ... ok
----------------------------------------------------------------------
test_behavior (tests.test_conf.IsCallableTests.test_behavior) ... ok
----------------------------------------------------------------------
test_attribute_override (tests.test_conf.OverrideSettingsTests.test_attribute_override) ... ok
----------------------------------------------------------------------
test_missing_attribute_override (tests.test_conf.OverrideSettingsTests.test_missing_attribute_override) ... ok
----------------------------------------------------------------------
test_non_existent_setting (tests.test_conf.OverrideSettingsTests.test_non_existent_setting) ... ok
----------------------------------------------------------------------
test_non_filters_setting (tests.test_conf.OverrideSettingsTests.test_non_filters_setting) ... ok
----------------------------------------------------------------------
test_get_setting_deprecated (tests.test_conf.SettingsObjectTestCase.test_get_setting_deprecated) ... ok
----------------------------------------------------------------------
test_clean (tests.test_fields.BaseCSVFieldTests.test_clean) ... ok
----------------------------------------------------------------------
test_derived_widget (tests.test_fields.BaseCSVFieldTests.test_derived_widget) ... ok
----------------------------------------------------------------------
test_required_error (tests.test_fields.BaseCSVFieldTests.test_required_error) ... ok
----------------------------------------------------------------------
test_validation_error (tests.test_fields.BaseCSVFieldTests.test_validation_error) ... ok
----------------------------------------------------------------------
test_clean (tests.test_fields.BaseRangeFieldTests.test_clean) ... ok
----------------------------------------------------------------------
test_required_error (tests.test_fields.BaseRangeFieldTests.test_required_error) ... ok
----------------------------------------------------------------------
test_validation_error (tests.test_fields.BaseRangeFieldTests.test_validation_error) ... ok
----------------------------------------------------------------------
test_callable_choices_is_lazy (tests.test_fields.ChoiceFieldTests.test_callable_choices_is_lazy) ... ok
----------------------------------------------------------------------
test_clean (tests.test_fields.DateRangeFieldTests.test_clean) ... ok
----------------------------------------------------------------------
test_field (tests.test_fields.DateRangeFieldTests.test_field) ... ok
----------------------------------------------------------------------
test_clean (tests.test_fields.DateTimeRangeFieldTests.test_clean) ... ok
----------------------------------------------------------------------
test_field (tests.test_fields.DateTimeRangeFieldTests.test_field) ... ok
----------------------------------------------------------------------
test_datetime_non_iso_format (tests.test_fields.IsoDateTimeFieldTests.test_datetime_non_iso_format) ... ok
----------------------------------------------------------------------
test_datetime_string_is_parsed (tests.test_fields.IsoDateTimeFieldTests.test_datetime_string_is_parsed) ... ok
----------------------------------------------------------------------
test_datetime_string_with_timezone_is_parsed (tests.test_fields.IsoDateTimeFieldTests.test_datetime_string_with_timezone_is_parsed) ... ok
----------------------------------------------------------------------
test_datetime_timezone_awareness (tests.test_fields.IsoDateTimeFieldTests.test_datetime_timezone_awareness) ... skipped 'pytz support removed in Django 5.0'
----------------------------------------------------------------------
test_datetime_timezone_naivety (tests.test_fields.IsoDateTimeFieldTests.test_datetime_timezone_naivety) ... ok
----------------------------------------------------------------------
test_datetime_wrong_format (tests.test_fields.IsoDateTimeFieldTests.test_datetime_wrong_format) ... ok
----------------------------------------------------------------------
test_datetime_zulu (tests.test_fields.IsoDateTimeFieldTests.test_datetime_zulu) ... ok
----------------------------------------------------------------------
test_clean (tests.test_fields.IsoDateTimeRangeFieldTests.test_clean) ... ok
----------------------------------------------------------------------
test_field (tests.test_fields.IsoDateTimeRangeFieldTests.test_field) ... ok
----------------------------------------------------------------------
test_clean (tests.test_fields.LookupChoiceFieldTests.test_clean) ... ok
----------------------------------------------------------------------
test_field (tests.test_fields.LookupChoiceFieldTests.test_field) ... ok
----------------------------------------------------------------------
test_render_used_html5 (tests.test_fields.LookupChoiceFieldTests.test_render_used_html5) ... ok
----------------------------------------------------------------------
test_empty_attrs (tests.test_fields.LookupTests.test_empty_attrs) ... ok
----------------------------------------------------------------------
test_empty_lookup_expr (tests.test_fields.LookupTests.test_empty_lookup_expr) ... ok
----------------------------------------------------------------------
test_empty_value (tests.test_fields.LookupTests.test_empty_value) ... ok
----------------------------------------------------------------------
test_clean (tests.test_fields.RangeFieldTests.test_clean) ... ok
----------------------------------------------------------------------
test_field (tests.test_fields.RangeFieldTests.test_field) ... ok
----------------------------------------------------------------------
test_clean (tests.test_fields.TimeRangeFieldTests.test_clean) ... ok
----------------------------------------------------------------------
test_field (tests.test_fields.TimeRangeFieldTests.test_field) ... ok
----------------------------------------------------------------------
test_filtering (tests.test_filtering.AllValuesFilterTests.test_filtering) ... ok
(0.005) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$group': {'_id': {'username': '$username'}}}, {'$project': {'username': '$_id.username'}}, {'$sort': SON([('username', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$username', 'alex']}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$username', 'alex']}}}, {'$limit': 21}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$group': {'_id': {'username': '$username'}}}, {'$project': {'username': '$_id.username'}}, {'$sort': SON([('username', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$group': {'_id': {'username': '$username'}}}, {'$project': {'username': '$_id.username'}}, {'$sort': SON([('username', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.AllValuesMultipleFilterTests.test_filtering) ... ok
(0.005) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$group': {'_id': {'username': '$username'}}}, {'$project': {'username': '$_id.username'}}, {'$sort': SON([('username', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$group': {'_id': {'username': '$username'}}}, {'$project': {'username': '$_id.username'}}, {'$sort': SON([('username', 1)])}])
(0.007) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$username', 'alex']}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$username', 'alex']}}}, {'$limit': 21}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$group': {'_id': {'username': '$username'}}}, {'$project': {'username': '$_id.username'}}, {'$sort': SON([('username', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$group': {'_id': {'username': '$username'}}}, {'$project': {'username': '$_id.username'}}, {'$sort': SON([('username', 1)])}])
(0.003) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$group': {'_id': {'username': '$username'}}}, {'$project': {'username': '$_id.username'}}, {'$sort': SON([('username', 1)])}])
(0.005) db.tests_user.aggregate([{'$match': {'$expr': {'$or': [{'$eq': ['$username', 'alex']}, {'$eq': ['$username', 'jacob']}]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$in': ['$username', ['alex', 'jacob']]}}}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$group': {'_id': {'username': '$username'}}}, {'$project': {'username': '$_id.username'}}, {'$sort': SON([('username', 1)])}])
(0.003) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$group': {'_id': {'username': '$username'}}}, {'$project': {'username': '$_id.username'}}, {'$sort': SON([('username', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.BooleanFilterTests.test_filtering) ... ok
(0.005) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': True, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$is_active', True]}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$is_active', False]}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_datetime_filtering (tests.test_filtering.CSVFilterTests.test_datetime_filtering) ... ok
(0.003) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.000) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.000) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.000) db.tests_user.insert_many([{'username': 'carl', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.000) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 18, 44, 32, 563131), 'author_id': ObjectId('67ddc1a072359784306a5427')}])
(0.000) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 18, 44, 32, 563131), 'author_id': ObjectId('67ddc1a072359784306a5428')}])
(0.000) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 16, 44, 32, 563131), 'author_id': ObjectId('67ddc1a072359784306a5427')}])
(0.000) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 16, 44, 32, 563131), 'author_id': ObjectId('67ddc1a072359784306a5428')}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {'$in': ['$published', [datetime.datetime(2025, 3, 21, 16, 44, 32, 563131)]]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {'$in': ['$published', [datetime.datetime(2025, 3, 21, 18, 44, 32, 563131)]]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {'$in': ['$published', [datetime.datetime(2025, 3, 21, 18, 44, 32, 563131), datetime.datetime(2025, 3, 21, 16, 44, 32, 563131)]]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {'$in': ['$published', [datetime.datetime(2025, 3, 21, 18, 44, 32, 563131), datetime.datetime(2025, 3, 21, 16, 44, 32, 563131)]]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {'$in': ['$published', [datetime.datetime(2025, 3, 21, 18, 44, 32, 563131)]]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
----------------------------------------------------------------------
test_numeric_filtering (tests.test_filtering.CSVFilterTests.test_numeric_filtering) ... ok
(0.002) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.000) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.000) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.000) db.tests_user.insert_many([{'username': 'carl', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.000) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 18, 44, 32, 642314), 'author_id': ObjectId('67ddc1a072359784306a54c6')}])
(0.000) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 18, 44, 32, 642314), 'author_id': ObjectId('67ddc1a072359784306a54c7')}])
(0.000) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 16, 44, 32, 642314), 'author_id': ObjectId('67ddc1a072359784306a54c6')}])
(0.000) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 16, 44, 32, 642314), 'author_id': ObjectId('67ddc1a072359784306a54c7')}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$in': ['$status', [2]]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$in': ['$status', [0]]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$in': ['$status', [0, 2]]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$in': ['$status', [0, 1]]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$in': ['$status', [2]]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
----------------------------------------------------------------------
test_related_filtering (tests.test_filtering.CSVFilterTests.test_related_filtering) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'carl', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 18, 44, 32, 750345), 'author_id': ObjectId('67ddc1a072359784306a5565')}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 18, 44, 32, 750345), 'author_id': ObjectId('67ddc1a072359784306a5566')}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 16, 44, 32, 750345), 'author_id': ObjectId('67ddc1a072359784306a5565')}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 16, 44, 32, 750345), 'author_id': ObjectId('67ddc1a072359784306a5566')}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$_id', ObjectId('67ddc1a072359784306a5566')]}}}, {'$limit': 21}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {'$in': ['$author_id', [ObjectId('67ddc1a072359784306a5566')]]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$_id', ObjectId('67ddc1a072359784306a5565')]}}}, {'$limit': 21}])
(0.002) db.tests_article.aggregate([{'$match': {'$expr': {'$in': ['$author_id', [ObjectId('67ddc1a072359784306a5565')]]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$_id', ObjectId('67ddc1a072359784306a5565')]}}}, {'$limit': 21}])
(0.004) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$_id', ObjectId('67ddc1a072359784306a5566')]}}}, {'$limit': 21}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {'$in': ['$author_id', [ObjectId('67ddc1a072359784306a5565'), ObjectId('67ddc1a072359784306a5566')]]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$_id', ObjectId('67ddc1a072359784306a5565')]}}}, {'$limit': 21}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$_id', ObjectId('67ddc1a072359784306a5566')]}}}, {'$limit': 21}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {'$in': ['$author_id', [ObjectId('67ddc1a072359784306a5565'), ObjectId('67ddc1a072359784306a5566')]]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$_id', ObjectId('67ddc1a072359784306a5565')]}}}, {'$limit': 21}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {'$in': ['$author_id', [ObjectId('67ddc1a072359784306a5565')]]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
----------------------------------------------------------------------
test_string_filtering (tests.test_filtering.CSVFilterTests.test_string_filtering) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'carl', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 18, 44, 32, 949275), 'author_id': ObjectId('67ddc1a072359784306a5604')}])
(0.002) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 18, 44, 32, 949275), 'author_id': ObjectId('67ddc1a072359784306a5605')}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 16, 44, 32, 949275), 'author_id': ObjectId('67ddc1a072359784306a5604')}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 16, 44, 32, 949275), 'author_id': ObjectId('67ddc1a072359784306a5605')}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$in': ['$username', ['aaron']]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {'$in': ['$username', ['']]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {'$in': ['$username', ['alex']]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$in': ['$username', ['alex', 'aaron']]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$in': ['$username', ['alex', '', 'aaron']]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$in': ['$username', ['alex', '']]}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.CSVRangeFilterTests.test_filtering) ... FAIL
(0.002) db.tests_article.aggregate([{'$match': {'$expr': {}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {'$and': [{'$or': [{'$or': [{'$eq': [{'$type': None}, 'missing']}, {'$eq': [None, None]}]}, {'$gte': ['$published', None]}]}, {'$or': [{'$or': [{'$eq': [{'$type': None}, 'missing']}, {'$eq': [None, None]}]}, {'$lte': ['$published', None]}]}]}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.CharFilterTests.test_filtering) ... ok
(0.005) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.aggregate([{'$match': {'$expr': {}}}])
(0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$eq': ['$title', 'Snowcrash']}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.ChoiceFilterTests.test_filtering) ... ERROR
test_filtering_on_empty_choice (tests.test_filtering.ChoiceFilterTests.test_filtering_on_empty_choice) ... ERROR
test_filtering_on_explicitly_defined_field (tests.test_filtering.ChoiceFilterTests.test_filtering_on_explicitly_defined_field)
Test for #30. ... ERROR
test_filtering_on_null_choice (tests.test_filtering.ChoiceFilterTests.test_filtering_on_null_choice) ... ERROR
test_filtering (tests.test_filtering.DateFilterTests.test_filtering) ... ok
(0.001) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a172359784306a57ec'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 33)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a172359784306a57ec'), 'date': datetime.datetime(2025, 3, 14, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 33)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a172359784306a57ec'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 33)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a172359784306a57ec'), 'date': datetime.datetime(2025, 3, 14, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 33)}])
(0.001) db.tests_comment.aggregate([{'$match': {'$expr': {'$eq': ['$date', datetime.datetime(2025, 3, 14, 0, 0)]}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.DateFromToRangeFilterTests.test_filtering) ... ok
(0.010) db.tests_user.insert_many([{'username': 'adam', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_comment.insert_many([{'text': 'test', 'author_id': ObjectId('67ddc1a172359784306a5888'), 'date': datetime.datetime(2016, 1, 1, 0, 0), 'time': datetime.datetime(1, 1, 1, 10, 0)}])
(0.001) db.tests_comment.insert_many([{'text': 'test', 'author_id': ObjectId('67ddc1a172359784306a5888'), 'date': datetime.datetime(2016, 1, 2, 0, 0), 'time': datetime.datetime(1, 1, 1, 10, 0)}])
(0.001) db.tests_comment.insert_many([{'text': 'test', 'author_id': ObjectId('67ddc1a172359784306a5888'), 'date': datetime.datetime(2016, 1, 3, 0, 0), 'time': datetime.datetime(1, 1, 1, 10, 0)}])
(0.001) db.tests_comment.insert_many([{'text': 'test', 'author_id': ObjectId('67ddc1a172359784306a5888'), 'date': datetime.datetime(2016, 1, 3, 0, 0), 'time': datetime.datetime(1, 1, 1, 10, 0)}])
(0.003) db.tests_comment.aggregate([{'$match': {'$expr': {'$and': [{'$or': [{'$or': [{'$eq': [{'$type': datetime.datetime(2016, 1, 2, 0, 0)}, 'missing']}, {'$eq': [datetime.datetime(2016, 1, 2, 0, 0), None]}]}, {'$gte': ['$date', datetime.datetime(2016, 1, 2, 0, 0)]}]}, {'$or': [{'$or': [{'$eq': [{'$type': datetime.datetime(2016, 1, 3, 0, 0)}, 'missing']}, {'$eq': [datetime.datetime(2016, 1, 3, 0, 0), None]}]}, {'$lte': ['$date', datetime.datetime(2016, 1, 3, 0, 0)]}]}]}}}])
----------------------------------------------------------------------
test_filtering_dst_end (tests.test_filtering.DateFromToRangeFilterTests.test_filtering_dst_end) ... skipped 'is_dst removed in Django 5.0'
----------------------------------------------------------------------
test_filtering_dst_ends_midnight (tests.test_filtering.DateFromToRangeFilterTests.test_filtering_dst_ends_midnight) ... skipped 'is_dst removed in Django 5.0'
----------------------------------------------------------------------
test_filtering_dst_start (tests.test_filtering.DateFromToRangeFilterTests.test_filtering_dst_start) ... skipped 'is_dst removed in Django 5.0'
----------------------------------------------------------------------
test_filtering_dst_start_midnight (tests.test_filtering.DateFromToRangeFilterTests.test_filtering_dst_start_midnight) ... skipped 'is_dst removed in Django 5.0'
----------------------------------------------------------------------
test_filtering_ignores_time (tests.test_filtering.DateFromToRangeFilterTests.test_filtering_ignores_time) ... ok
(0.006) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2016, 1, 1, 10, 0), 'author_id': None}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2016, 1, 2, 12, 45), 'author_id': None}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2016, 1, 3, 18, 15), 'author_id': None}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2016, 1, 3, 19, 30), 'author_id': None}])
(0.002) db.tests_article.aggregate([{'$match': {'$expr': {'$and': [{'$or': [{'$or': [{'$eq': [{'$type': datetime.datetime(2016, 1, 2, 0, 0)}, 'missing']}, {'$eq': [datetime.datetime(2016, 1, 2, 0, 0), None]}]}, {'$gte': ['$published', datetime.datetime(2016, 1, 2, 0, 0)]}]}, {'$or': [{'$or': [{'$eq': [{'$type': datetime.datetime(2016, 1, 3, 23, 59, 59, 999999)}, 'missing']}, {'$eq': [datetime.datetime(2016, 1, 3, 23, 59, 59, 999999), None]}]}, {'$lte': ['$published', datetime.datetime(2016, 1, 3, 23, 59, 59, 999999)]}]}]}}}])
----------------------------------------------------------------------
test_filtering_for_month (tests.test_filtering.DateRangeFilterTests.test_filtering_for_month) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a59bf'), 'date': datetime.datetime(2025, 4, 7, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 142268)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a59bf'), 'date': datetime.datetime(2023, 2, 11, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 142268)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a59bf'), 'date': datetime.datetime(2025, 4, 16, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 142268)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a59bf'), 'date': datetime.datetime(2025, 4, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 142268)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a59bf'), 'date': datetime.datetime(2025, 4, 20, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 142268)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a59bf'), 'date': datetime.datetime(2025, 2, 18, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 142268)}])
(0.001) db.tests_comment.aggregate([{'$match': {'$expr': {'$and': [{'$eq': [{'$month': {'date': '$date', 'timezone': 'UTC'}}, 4]}, {'$eq': [{'$year': {'date': '$date', 'timezone': 'UTC'}}, 2025]}]}}}])
----------------------------------------------------------------------
test_filtering_for_today (tests.test_filtering.DateRangeFilterTests.test_filtering_for_today) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5a5d'), 'date': datetime.datetime(2024, 12, 18, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 337998)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5a5d'), 'date': datetime.datetime(2022, 10, 24, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 337998)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5a5d'), 'date': datetime.datetime(2024, 12, 27, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 337998)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5a5d'), 'date': datetime.datetime(2025, 1, 1, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 337998)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5a5d'), 'date': datetime.datetime(2024, 12, 31, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 337998)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5a5d'), 'date': datetime.datetime(2024, 10, 31, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 337998)}])
(0.001) db.tests_comment.aggregate([{'$match': {'$expr': {'$and': [{'$eq': [{'$dayOfMonth': {'date': '$date', 'timezone': 'UTC'}}, 1]}, {'$eq': [{'$month': {'date': '$date', 'timezone': 'UTC'}}, 1]}, {'$eq': [{'$year': {'date': '$date', 'timezone': 'UTC'}}, 2025]}]}}}])
----------------------------------------------------------------------
test_filtering_for_week (tests.test_filtering.DateRangeFilterTests.test_filtering_for_week) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5afb'), 'date': datetime.datetime(2024, 12, 18, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 527025)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5afb'), 'date': datetime.datetime(2022, 10, 24, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 527025)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5afb'), 'date': datetime.datetime(2024, 12, 27, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 527025)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5afb'), 'date': datetime.datetime(2025, 1, 1, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 527025)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5afb'), 'date': datetime.datetime(2024, 12, 31, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 527025)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5afb'), 'date': datetime.datetime(2024, 10, 31, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 527025)}])
(0.002) db.tests_comment.aggregate([{'$match': {'$expr': {'$and': [{'$gte': ['$date', datetime.datetime(2024, 12, 25, 0, 0)]}, {'$and': [{'$lt': ['$date', datetime.datetime(2025, 1, 2, 0, 0)]}, {'$ne': ['$date', None]}]}]}}}])
----------------------------------------------------------------------
test_filtering_for_year (tests.test_filtering.DateRangeFilterTests.test_filtering_for_year) ... ok
(0.002) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.000) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5b99'), 'date': datetime.datetime(2025, 3, 18, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 704946)}])
(0.000) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5b99'), 'date': datetime.datetime(2023, 1, 22, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 704946)}])
(0.000) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5b99'), 'date': datetime.datetime(2025, 3, 27, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 704946)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5b99'), 'date': datetime.datetime(2025, 4, 1, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 704946)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5b99'), 'date': datetime.datetime(2025, 3, 31, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 704946)}])
(0.000) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5b99'), 'date': datetime.datetime(2025, 1, 29, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 704946)}])
(0.001) db.tests_comment.aggregate([{'$match': {'$expr': {'$eq': [{'$year': {'date': '$date', 'timezone': 'UTC'}}, 2025]}}}])
----------------------------------------------------------------------
test_filtering_for_yesterday (tests.test_filtering.DateRangeFilterTests.test_filtering_for_yesterday) ... ok
(0.010) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5c37'), 'date': datetime.datetime(2024, 12, 18, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 857975)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5c37'), 'date': datetime.datetime(2022, 10, 24, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 857975)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5c37'), 'date': datetime.datetime(2024, 12, 27, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 857975)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5c37'), 'date': datetime.datetime(2025, 1, 1, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 857975)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5c37'), 'date': datetime.datetime(2024, 12, 31, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 857975)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a272359784306a5c37'), 'date': datetime.datetime(2024, 10, 31, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 34, 857975)}])
(0.001) db.tests_comment.aggregate([{'$match': {'$expr': {'$and': [{'$eq': [{'$dayOfMonth': {'date': '$date', 'timezone': 'UTC'}}, 31]}, {'$eq': [{'$month': {'date': '$date', 'timezone': 'UTC'}}, 12]}, {'$eq': [{'$year': {'date': '$date', 'timezone': 'UTC'}}, 2024]}]}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.DateTimeFilterTests.test_filtering) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 19, 44, 35, 41556), 'author_id': ObjectId('67ddc1a372359784306a5cd5')}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 19, 34, 35, 41556), 'author_id': ObjectId('67ddc1a372359784306a5cd5')}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 20, 19, 44, 35, 41556), 'author_id': ObjectId('67ddc1a372359784306a5cd5')}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {'$eq': ['$published', datetime.datetime(2025, 3, 21, 19, 34, 35, 41556)]}}}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {'$eq': ['$published', datetime.datetime(2025, 3, 21, 19, 34, 35, 41556)]}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.DateTimeFromToRangeFilterTests.test_filtering) ... ok
(0.009) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2016, 1, 1, 10, 0), 'author_id': None}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2016, 1, 2, 12, 45), 'author_id': None}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2016, 1, 3, 18, 15), 'author_id': None}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2016, 1, 3, 19, 30), 'author_id': None}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {'$and': [{'$or': [{'$or': [{'$eq': [{'$type': datetime.datetime(2016, 1, 2, 10, 0)}, 'missing']}, {'$eq': [datetime.datetime(2016, 1, 2, 10, 0), None]}]}, {'$gte': ['$published', datetime.datetime(2016, 1, 2, 10, 0)]}]}, {'$or': [{'$or': [{'$eq': [{'$type': datetime.datetime(2016, 1, 3, 19, 0)}, 'missing']}, {'$eq': [datetime.datetime(2016, 1, 3, 19, 0), None]}]}, {'$lte': ['$published', datetime.datetime(2016, 1, 3, 19, 0)]}]}]}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.DurationFilterTests.test_filtering) ... ok
(0.006) db.tests_spacewalkrecord.insert_many([{'astronaut': 'Anatoly Solovyev', 'duration': 296520000}])
(0.001) db.tests_spacewalkrecord.insert_many([{'astronaut': 'Michael Lopez-Alegria', 'duration': 243600000}])
(0.001) db.tests_spacewalkrecord.insert_many([{'astronaut': 'Jerry L. Ross', 'duration': 210720000}])
(0.001) db.tests_spacewalkrecord.insert_many([{'astronaut': 'John M. Grunsfeld', 'duration': 210600000}])
(0.001) db.tests_spacewalkrecord.insert_many([{'astronaut': 'Richard Mastracchio', 'duration': 191040000}])
(0.001) db.tests_spacewalkrecord.aggregate([{'$match': {'$expr': {'$eq': ['$duration', 296520000]}}}])
(0.001) db.tests_spacewalkrecord.aggregate([{'$match': {'$expr': {'$eq': ['$duration', 296520000]}}}])
(0.001) db.tests_spacewalkrecord.aggregate([{'$match': {'$expr': {'$eq': ['$duration', 296520000]}}}])
(0.001) db.tests_spacewalkrecord.aggregate([{'$match': {'$expr': {'$eq': ['$duration', 296520000]}}}])
----------------------------------------------------------------------
test_filtering_with_multiple_lookup_exprs (tests.test_filtering.DurationFilterTests.test_filtering_with_multiple_lookup_exprs) ... ok
(0.018) db.tests_spacewalkrecord.insert_many([{'astronaut': 'Anatoly Solovyev', 'duration': 296520000}])
(0.003) db.tests_spacewalkrecord.insert_many([{'astronaut': 'Michael Lopez-Alegria', 'duration': 243600000}])
(0.001) db.tests_spacewalkrecord.insert_many([{'astronaut': 'Jerry L. Ross', 'duration': 210720000}])
(0.001) db.tests_spacewalkrecord.insert_many([{'astronaut': 'John M. Grunsfeld', 'duration': 210600000}])
(0.001) db.tests_spacewalkrecord.insert_many([{'astronaut': 'Richard Mastracchio', 'duration': 191040000}])
(0.004) db.tests_spacewalkrecord.aggregate([{'$match': {'$expr': {'$and': [{'$gte': ['$duration', 198000000]}, {'$and': [{'$lte': ['$duration', 216000000]}, {'$ne': ['$duration', None]}]}]}}}, {'$addFields': {'duration': '$duration'}}, {'$sort': SON([('duration', 1)])}])
----------------------------------------------------------------------
test_filtering_with_single_lookup_expr_dictionary (tests.test_filtering.DurationFilterTests.test_filtering_with_single_lookup_expr_dictionary) ... ok
(0.016) db.tests_spacewalkrecord.insert_many([{'astronaut': 'Anatoly Solovyev', 'duration': 296520000}])
(0.002) db.tests_spacewalkrecord.insert_many([{'astronaut': 'Michael Lopez-Alegria', 'duration': 243600000}])
(0.001) db.tests_spacewalkrecord.insert_many([{'astronaut': 'Jerry L. Ross', 'duration': 210720000}])
(0.002) db.tests_spacewalkrecord.insert_many([{'astronaut': 'John M. Grunsfeld', 'duration': 210600000}])
(0.001) db.tests_spacewalkrecord.insert_many([{'astronaut': 'Richard Mastracchio', 'duration': 191040000}])
(0.010) db.tests_spacewalkrecord.aggregate([{'$match': {'$expr': {'$gt': ['$duration', 210600000]}}}, {'$addFields': {'duration': '$duration'}}, {'$sort': SON([('duration', -1)])}])
(0.002) db.tests_spacewalkrecord.aggregate([{'$match': {'$expr': {'$gte': ['$duration', 210600000]}}}, {'$addFields': {'duration': '$duration'}}, {'$sort': SON([('duration', -1)])}])
(0.002) db.tests_spacewalkrecord.aggregate([{'$match': {'$expr': {'$and': [{'$lt': ['$duration', 210600000]}, {'$ne': ['$duration', None]}]}}}, {'$addFields': {'duration': '$duration'}}, {'$sort': SON([('duration', -1)])}])
(0.002) db.tests_spacewalkrecord.aggregate([{'$match': {'$expr': {'$and': [{'$lte': ['$duration', 210600000]}, {'$ne': ['$duration', None]}]}}}, {'$addFields': {'duration': '$duration'}}, {'$sort': SON([('duration', -1)])}])
----------------------------------------------------------------------
test_fk_relation (tests.test_filtering.FKRelationshipTests.test_fk_relation) ... ok
(0.009) db.tests_company.insert_many([{'name': 'company1'}])
(0.001) db.tests_company.insert_many([{'name': 'company2'}])
(0.001) db.tests_location.insert_many([{'company_id': ObjectId('67ddc1a372359784306a5fdf'), 'name': '', 'zip_code': '90210', 'open_days': 'some'}])
(0.001) db.tests_location.insert_many([{'company_id': ObjectId('67ddc1a372359784306a5fe0'), 'name': '', 'zip_code': '11111', 'open_days': 'WEEKEND'}])
(0.001) db.tests_location.insert_many([{'company_id': ObjectId('67ddc1a372359784306a5fdf'), 'name': '', 'zip_code': '12345', 'open_days': 'monday'}])
(0.002) db.tests_location.aggregate([{'$match': {'$expr': {}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.002) db.tests_company.aggregate([{'$match': {'$expr': {'$eq': ['$_id', ObjectId('67ddc1a372359784306a5fdf')]}}}, {'$limit': 21}])
(0.002) db.tests_location.aggregate([{'$match': {'$expr': {'$eq': ['$company_id', ObjectId('67ddc1a372359784306a5fdf')]}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.001) db.tests_location.aggregate([{'$match': {'$expr': {'$eq': ['$company_id', ObjectId('67ddc1a372359784306a5fdf')]}}}])
----------------------------------------------------------------------
test_fk_relation_attribute (tests.test_filtering.FKRelationshipTests.test_fk_relation_attribute) ... ok
(0.004) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 19, 44, 36, 147394), 'author_id': ObjectId('67ddc1a472359784306a607b')}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 19, 44, 36, 147394), 'author_id': ObjectId('67ddc1a472359784306a607c')}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 19, 44, 36, 147394), 'author_id': ObjectId('67ddc1a472359784306a607b')}])
(0.004) db.tests_article.aggregate([{'$lookup': {'from': 'tests_user', 'let': {'parent__field__0': '$author_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_user'}}, {'$unwind': '$tests_user'}, {'$match': {'$expr': {'$eq': ['$tests_user.username', 'alex']}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.003) db.tests_article.aggregate([{'$lookup': {'from': 'tests_user', 'let': {'parent__field__0': '$author_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_user'}}, {'$unwind': '$tests_user'}, {'$match': {'$expr': {'$eq': ['$tests_user.username', 'jacob']}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.004) db.tests_article.aggregate([{'$lookup': {'from': 'tests_user', 'let': {'parent__field__0': '$author_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_user'}}, {'$set': {'tests_user': {'$cond': {'if': {'$or': [{'$eq': [{'$type': '$tests_user'}, 'missing']}, {'$eq': [{'$size': '$tests_user'}, 0]}]}, 'then': [{}], 'else': '$tests_user'}}}}, {'$unwind': '$tests_user'}, {'$match': {'$expr': {}}}, {'$group': {'_id': {'tests_user': {'username': '$tests_user.username'}}}}, {'$project': {'tests_user': '$_id.tests_user'}}, {'$sort': SON([('tests_user.username', 1)])}])
(0.003) db.tests_article.aggregate([{'$lookup': {'from': 'tests_user', 'let': {'parent__field__0': '$author_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_user'}}, {'$unwind': '$tests_user'}, {'$match': {'$expr': {'$eq': ['$tests_user.username', 'alex']}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
----------------------------------------------------------------------
test_fk_relation_multiple_attributes (tests.test_filtering.FKRelationshipTests.test_fk_relation_multiple_attributes) ... skipped 'todo - need correct models'
----------------------------------------------------------------------
test_reverse_fk_relation (tests.test_filtering.FKRelationshipTests.test_reverse_fk_relation) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_comment.insert_many([{'text': 'comment 1', 'author_id': ObjectId('67ddc1a472359784306a6119'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 36, 373207)}])
(0.001) db.tests_comment.insert_many([{'text': 'comment 2', 'author_id': ObjectId('67ddc1a472359784306a6118'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 36, 373207)}])
(0.001) db.tests_comment.insert_many([{'text': 'comment 3', 'author_id': ObjectId('67ddc1a472359784306a6119'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 36, 373207)}])
(0.001) db.tests_comment.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1a472359784306a611b')]]}}}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_comment', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$author_id']}]}}}], 'as': 'tests_comment'}}, {'$unwind': '$tests_comment'}, {'$match': {'$expr': {'$eq': ['$tests_comment._id', ObjectId('67ddc1a472359784306a611b')]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_comment', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$author_id']}]}}}], 'as': 'tests_comment'}}, {'$set': {'tests_comment': {'$cond': {'if': {'$or': [{'$eq': [{'$type': '$tests_comment'}, 'missing']}, {'$eq': [{'$size': '$tests_comment'}, 0]}]}, 'then': [{}], 'else': '$tests_comment'}}}}, {'$unwind': '$tests_comment'}, {'$match': {'$expr': {}}}, {'$group': {'_id': {'tests_comment': {'_id': '$tests_comment._id'}}}}, {'$project': {'tests_comment': '$_id.tests_comment'}}, {'$sort': SON([('tests_comment._id', 1)])}])
(0.002) db.tests_user.aggregate([{'$lookup': {'from': 'tests_comment', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$author_id']}]}}}], 'as': 'tests_comment'}}, {'$unwind': '$tests_comment'}, {'$match': {'$expr': {'$eq': ['$tests_comment._id', ObjectId('67ddc1a472359784306a611b')]}}}])
----------------------------------------------------------------------
test_reverse_fk_relation_attribute (tests.test_filtering.FKRelationshipTests.test_reverse_fk_relation_attribute) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_comment.insert_many([{'text': 'comment 1', 'author_id': ObjectId('67ddc1a472359784306a61b5'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 36, 572349)}])
(0.001) db.tests_comment.insert_many([{'text': 'comment 2', 'author_id': ObjectId('67ddc1a472359784306a61b4'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 36, 572349)}])
(0.001) db.tests_comment.insert_many([{'text': 'comment 3', 'author_id': ObjectId('67ddc1a472359784306a61b5'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 36, 572349)}])
(0.002) db.tests_user.aggregate([{'$lookup': {'from': 'tests_comment', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$author_id']}]}}}], 'as': 'tests_comment'}}, {'$unwind': '$tests_comment'}, {'$match': {'$expr': {'$eq': ['$tests_comment.text', 'comment 2']}}}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_comment', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$author_id']}]}}}], 'as': 'tests_comment'}}, {'$set': {'tests_comment': {'$cond': {'if': {'$or': [{'$eq': [{'$type': '$tests_comment'}, 'missing']}, {'$eq': [{'$size': '$tests_comment'}, 0]}]}, 'then': [{}], 'else': '$tests_comment'}}}}, {'$unwind': '$tests_comment'}, {'$match': {'$expr': {}}}, {'$group': {'_id': {'tests_comment': {'text': '$tests_comment.text'}}}}, {'$project': {'tests_comment': '$_id.tests_comment'}}, {'$sort': SON([('tests_comment.text', 1)])}])
(0.002) db.tests_user.aggregate([{'$lookup': {'from': 'tests_comment', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$author_id']}]}}}], 'as': 'tests_comment'}}, {'$unwind': '$tests_comment'}, {'$match': {'$expr': {'$eq': ['$tests_comment.text', 'comment 2']}}}])
----------------------------------------------------------------------
test_reverse_fk_relation_multiple_attributes (tests.test_filtering.FKRelationshipTests.test_reverse_fk_relation_multiple_attributes) ... expected failure
(0.006) db.tests_company.insert_many([{'name': 'company'}])
(0.001) db.tests_location.insert_many([{'company_id': ObjectId('67ddc1a472359784306a6250'), 'name': '', 'zip_code': '90210', 'open_days': 'some'}])
(0.001) db.tests_location.insert_many([{'company_id': ObjectId('67ddc1a472359784306a6250'), 'name': '', 'zip_code': '11111', 'open_days': 'WEEKEND'}])
(0.005) db.tests_company.aggregate([{'$lookup': {'from': 'tests_location', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$company_id']}]}}}], 'as': 'tests_location'}}, {'$unwind': '$tests_location'}, {'$lookup': {'from': 'tests_location', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$company_id']}]}}}], 'as': 'T3'}}, {'$unwind': '$T3'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_location.zip_code', '90210']}, {'$eq': ['$T3.open_days', 'WEEKEND']}]}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.FilterMethodTests.test_filtering) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$username', 'alex']}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$username', 'alex']}}}, {'$limit': 21}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$username', 'jose']}}}])
----------------------------------------------------------------------
test_filtering_callable (tests.test_filtering.FilterMethodTests.test_filtering_callable) ... ok
(0.010) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.002) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$username', 'alex']}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$username', 'alex']}}}, {'$limit': 21}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$username', 'jose']}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.IntegerFilterTest.test_filtering) ... ok
(0.008) db.tests_account.insert_many([{'name': '', 'in_good_standing': True, 'friendly': False}])
(0.001) db.tests_bankaccount.insert_many([{'account_ptr_id': ObjectId('67ddc1a572359784306a641e'), 'amount_saved': 0}])
(0.002) db.tests_account.insert_many([{'name': '', 'in_good_standing': True, 'friendly': False}])
(0.001) db.tests_bankaccount.insert_many([{'account_ptr_id': ObjectId('67ddc1a572359784306a6420'), 'amount_saved': 3}])
(0.001) db.tests_account.insert_many([{'name': '', 'in_good_standing': True, 'friendly': False}])
(0.001) db.tests_bankaccount.insert_many([{'account_ptr_id': ObjectId('67ddc1a572359784306a6422'), 'amount_saved': 10}])
(0.005) db.tests_bankaccount.aggregate([{'$lookup': {'from': 'tests_account', 'let': {'parent__field__0': '$account_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_account'}}, {'$unwind': '$tests_account'}, {'$match': {'$expr': {}}}])
(0.002) db.tests_bankaccount.aggregate([{'$lookup': {'from': 'tests_account', 'let': {'parent__field__0': '$account_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_account'}}, {'$unwind': '$tests_account'}, {'$match': {'$expr': {'$eq': ['$amount_saved', 10]}}}])
(0.002) db.tests_bankaccount.aggregate([{'$lookup': {'from': 'tests_account', 'let': {'parent__field__0': '$account_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_account'}}, {'$unwind': '$tests_account'}, {'$match': {'$expr': {'$eq': ['$amount_saved', 0]}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.IsoDateTimeFromToRangeFilterTests.test_filtering) ... ok
(0.006) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2016, 1, 1, 10, 0), 'author_id': None}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2016, 1, 2, 12, 45), 'author_id': None}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2016, 1, 3, 18, 15), 'author_id': None}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2016, 1, 3, 19, 30), 'author_id': None}])
(0.002) db.tests_article.aggregate([{'$match': {'$expr': {'$and': [{'$or': [{'$or': [{'$eq': [{'$type': datetime.datetime(2016, 1, 2, 10, 0)}, 'missing']}, {'$eq': [datetime.datetime(2016, 1, 2, 10, 0), None]}]}, {'$gte': ['$published', datetime.datetime(2016, 1, 2, 10, 0)]}]}, {'$or': [{'$or': [{'$eq': [{'$type': datetime.datetime(2016, 1, 3, 19, 0)}, 'missing']}, {'$eq': [datetime.datetime(2016, 1, 3, 19, 0), None]}]}, {'$lte': ['$published', datetime.datetime(2016, 1, 3, 19, 0)]}]}]}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.LookupChoiceFilterTests.test_filtering) ... ok
(0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$and': [{'$lt': ['$price', Decimal128('15')]}, {'$ne': ['$price', None]}]}}}])
(0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$and': [{'$lt': ['$price', Decimal128('15')]}, {'$ne': ['$price', None]}]}}}])
(0.001) db.tests_book.aggregate([{'$match': {'$expr': {}}}])
(0.001) db.tests_book.aggregate([{'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_inner_field_class_validation (tests.test_filtering.LookupChoiceFilterTests.test_inner_field_class_validation) ... ok
----------------------------------------------------------------------
test_lookup_choices_validation (tests.test_filtering.LookupChoiceFilterTests.test_lookup_choices_validation) ... ok
----------------------------------------------------------------------
test_lookup_omitted (tests.test_filtering.LookupChoiceFilterTests.test_lookup_omitted) ... ok
----------------------------------------------------------------------
test_fk_relation_attribute_on_m2m_relation (tests.test_filtering.M2MRelationshipTests.test_fk_relation_attribute_on_m2m_relation) ... skipped 'todo'
----------------------------------------------------------------------
test_fk_relation_on_m2m_relation (tests.test_filtering.M2MRelationshipTests.test_fk_relation_on_m2m_relation) ... skipped 'todo'
----------------------------------------------------------------------
test_m2m_relation (tests.test_filtering.M2MRelationshipTests.test_m2m_relation) ... ok
(0.005) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('2.00'), 'average_rating': 4.0}])
(0.001) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 4.0}])
(0.001) db.tests_book.insert_many([{'title': 'Stranger in a Strage Land', 'price': Decimal128('2.00'), 'average_rating': 3.0}])
(0.002) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1a672359784306a67c2'), ObjectId('67ddc1a672359784306a67c1')]]}, {'$eq': ['$user_id', ObjectId('67ddc1a672359784306a67be')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1a672359784306a67be'), 'book_id': ObjectId('67ddc1a672359784306a67c2')}, {'user_id': ObjectId('67ddc1a672359784306a67be'), 'book_id': ObjectId('67ddc1a672359784306a67c1')}])
(0.001) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1a672359784306a67c1'), ObjectId('67ddc1a672359784306a67c3')]]}, {'$eq': ['$user_id', ObjectId('67ddc1a672359784306a67c0')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1a672359784306a67c0'), 'book_id': ObjectId('67ddc1a672359784306a67c1')}, {'user_id': ObjectId('67ddc1a672359784306a67c0'), 'book_id': ObjectId('67ddc1a672359784306a67c3')}])
(0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1a672359784306a67c1')]]}}}])
(0.004) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1a672359784306a67c1')]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
(0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1a672359784306a67c1'), ObjectId('67ddc1a672359784306a67c3')]]}}}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$or': [{'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1a672359784306a67c1')]}, {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1a672359784306a67c3')]}]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
(0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1a672359784306a67c2')]]}}}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1a672359784306a67c2')]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
(0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1a672359784306a67c4')]]}}}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1a672359784306a67c4')]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
----------------------------------------------------------------------
test_m2m_relation_attribute (tests.test_filtering.M2MRelationshipTests.test_m2m_relation_attribute) ... ok
(0.008) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('2.00'), 'average_rating': 4.0}])
(0.001) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 4.0}])
(0.001) db.tests_book.insert_many([{'title': 'Stranger in a Strage Land', 'price': Decimal128('2.00'), 'average_rating': 3.0}])
(0.002) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1a672359784306a6863'), ObjectId('67ddc1a672359784306a6864')]]}, {'$eq': ['$user_id', ObjectId('67ddc1a672359784306a6860')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1a672359784306a6860'), 'book_id': ObjectId('67ddc1a672359784306a6863')}, {'user_id': ObjectId('67ddc1a672359784306a6860'), 'book_id': ObjectId('67ddc1a672359784306a6864')}])
(0.001) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1a672359784306a6863'), ObjectId('67ddc1a672359784306a6865')]]}, {'$eq': ['$user_id', ObjectId('67ddc1a672359784306a6862')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1a672359784306a6862'), 'book_id': ObjectId('67ddc1a672359784306a6863')}, {'user_id': ObjectId('67ddc1a672359784306a6862'), 'book_id': ObjectId('67ddc1a672359784306a6865')}])
(0.005) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_book', 'let': {'parent__field__0': '$tests_user_favorite_books.book_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_book'}}, {'$unwind': '$tests_book'}, {'$match': {'$expr': {'$eq': ['$tests_book.title', "Ender's Game"]}}}, {'$addFields': {'username': '$username'}}, {'$sort': SON([('username', 1)])}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_book', 'let': {'parent__field__0': '$tests_user_favorite_books.book_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_book'}}, {'$unwind': '$tests_book'}, {'$match': {'$expr': {'$eq': ['$tests_book.title', 'Rainbow Six']}}}, {'$addFields': {'username': '$username'}}, {'$sort': SON([('username', 1)])}])
(0.005) db.tests_book.aggregate([{'$match': {'$expr': {}}}])
(0.004) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_book', 'let': {'parent__field__0': '$tests_user_favorite_books.book_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_book'}}, {'$unwind': '$tests_book'}, {'$match': {'$expr': {'$or': [{'$eq': ['$tests_book.title', 'Snowcrash']}, {'$eq': ['$tests_book.title', "Ender's Game"]}]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$set': {'tests_user_favorite_books': {'$cond': {'if': {'$or': [{'$eq': [{'$type': '$tests_user_favorite_books'}, 'missing']}, {'$eq': [{'$size': '$tests_user_favorite_books'}, 0]}]}, 'then': [{}], 'else': '$tests_user_favorite_books'}}}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_book', 'let': {'parent__field__0': '$tests_user_favorite_books.book_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_book'}}, {'$set': {'tests_book': {'$cond': {'if': {'$or': [{'$eq': [{'$type': '$tests_book'}, 'missing']}, {'$eq': [{'$size': '$tests_book'}, 0]}]}, 'then': [{}], 'else': '$tests_book'}}}}, {'$unwind': '$tests_book'}, {'$match': {'$expr': {}}}, {'$group': {'_id': {'tests_book': {'title': '$tests_book.title'}}}}, {'$project': {'tests_book': '$_id.tests_book'}}, {'$sort': SON([('tests_book.title', 1)])}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_book', 'let': {'parent__field__0': '$tests_user_favorite_books.book_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_book'}}, {'$unwind': '$tests_book'}, {'$match': {'$expr': {'$eq': ['$tests_book.title', 'Snowcrash']}}}, {'$addFields': {'username': '$username'}}, {'$sort': SON([('username', 1)])}])
----------------------------------------------------------------------
test_m2m_relation_multiple_attributes (tests.test_filtering.M2MRelationshipTests.test_m2m_relation_multiple_attributes) ... expected failure
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('2.00'), 'average_rating': 4.0}])
(0.001) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 4.0}])
(0.001) db.tests_book.insert_many([{'title': 'Stranger in a Strage Land', 'price': Decimal128('2.00'), 'average_rating': 3.0}])
(0.002) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1a672359784306a6906'), ObjectId('67ddc1a672359784306a6905')]]}, {'$eq': ['$user_id', ObjectId('67ddc1a672359784306a6902')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1a672359784306a6902'), 'book_id': ObjectId('67ddc1a672359784306a6906')}, {'user_id': ObjectId('67ddc1a672359784306a6902'), 'book_id': ObjectId('67ddc1a672359784306a6905')}])
(0.001) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1a672359784306a6905'), ObjectId('67ddc1a672359784306a6907')]]}, {'$eq': ['$user_id', ObjectId('67ddc1a672359784306a6904')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1a672359784306a6904'), 'book_id': ObjectId('67ddc1a672359784306a6905')}, {'user_id': ObjectId('67ddc1a672359784306a6904'), 'book_id': ObjectId('67ddc1a672359784306a6907')}])
(0.011) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_book', 'let': {'parent__field__0': '$tests_user_favorite_books.book_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_book'}}, {'$unwind': '$tests_book'}, {'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'T4'}}, {'$unwind': '$T4'}, {'$lookup': {'from': 'tests_book', 'let': {'parent__field__0': '$T4.book_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'T5'}}, {'$unwind': '$T5'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_book.price', Decimal128('1.00')]}, {'$eq': ['$T5.average_rating', 4.0]}]}}}, {'$addFields': {'username': '$username'}}, {'$sort': SON([('username', 1)])}])
----------------------------------------------------------------------
test_reverse_m2m_relation (tests.test_filtering.M2MRelationshipTests.test_reverse_m2m_relation) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.002) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('2.00'), 'average_rating': 4.0}])
(0.001) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 4.0}])
(0.001) db.tests_book.insert_many([{'title': 'Stranger in a Strage Land', 'price': Decimal128('2.00'), 'average_rating': 3.0}])
(0.002) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1a772359784306a69a7'), ObjectId('67ddc1a772359784306a69a8')]]}, {'$eq': ['$user_id', ObjectId('67ddc1a772359784306a69a4')]}]}}}, {'$project': {'book_id': 1}}])
(0.002) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1a772359784306a69a4'), 'book_id': ObjectId('67ddc1a772359784306a69a7')}, {'user_id': ObjectId('67ddc1a772359784306a69a4'), 'book_id': ObjectId('67ddc1a772359784306a69a8')}])
(0.002) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1a772359784306a69a7'), ObjectId('67ddc1a772359784306a69a9')]]}, {'$eq': ['$user_id', ObjectId('67ddc1a772359784306a69a6')]}]}}}, {'$project': {'book_id': 1}}])
(0.002) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1a772359784306a69a6'), 'book_id': ObjectId('67ddc1a772359784306a69a7')}, {'user_id': ObjectId('67ddc1a772359784306a69a6'), 'book_id': ObjectId('67ddc1a772359784306a69a9')}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1a772359784306a69a4')]]}}}])
(0.007) db.tests_book.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$book_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.user_id', ObjectId('67ddc1a772359784306a69a4')]}}}, {'$group': {'_id': {'_id': '$_id', 'title': '$title', 'price': '$price', 'average_rating': '$average_rating'}}}, {'$project': {'_id': '$_id._id', 'title': '$_id.title', 'price': '$_id.price', 'average_rating': '$_id.average_rating'}}, {'$sort': SON([('title', 1)])}])
(0.004) db.tests_book.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$book_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$set': {'tests_user_favorite_books': {'$cond': {'if': {'$or': [{'$eq': [{'$type': '$tests_user_favorite_books'}, 'missing']}, {'$eq': [{'$size': '$tests_user_favorite_books'}, 0]}]}, 'then': [{}], 'else': '$tests_user_favorite_books'}}}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {}}}, {'$group': {'_id': {'tests_user_favorite_books': {'user_id': '$tests_user_favorite_books.user_id'}}}}, {'$project': {'tests_user_favorite_books': '$_id.tests_user_favorite_books'}}, {'$sort': SON([('tests_user_favorite_books.user_id', 1)])}])
(0.004) db.tests_book.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$book_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.user_id', ObjectId('67ddc1a772359784306a69a4')]}}}, {'$addFields': {'title': '$title'}}, {'$sort': SON([('title', 1)])}])
----------------------------------------------------------------------
test_reverse_m2m_relation_attribute (tests.test_filtering.M2MRelationshipTests.test_reverse_m2m_relation_attribute) ... ok
(0.007) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('2.00'), 'average_rating': 4.0}])
(0.001) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 4.0}])
(0.001) db.tests_book.insert_many([{'title': 'Stranger in a Strage Land', 'price': Decimal128('2.00'), 'average_rating': 3.0}])
(0.002) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1a772359784306a6a49'), ObjectId('67ddc1a772359784306a6a4a')]]}, {'$eq': ['$user_id', ObjectId('67ddc1a772359784306a6a46')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1a772359784306a6a46'), 'book_id': ObjectId('67ddc1a772359784306a6a49')}, {'user_id': ObjectId('67ddc1a772359784306a6a46'), 'book_id': ObjectId('67ddc1a772359784306a6a4a')}])
(0.001) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1a772359784306a6a49'), ObjectId('67ddc1a772359784306a6a4b')]]}, {'$eq': ['$user_id', ObjectId('67ddc1a772359784306a6a48')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1a772359784306a6a48'), 'book_id': ObjectId('67ddc1a772359784306a6a49')}, {'user_id': ObjectId('67ddc1a772359784306a6a48'), 'book_id': ObjectId('67ddc1a772359784306a6a4b')}])
(0.007) db.tests_book.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$book_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_user', 'let': {'parent__field__0': '$tests_user_favorite_books.user_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_user'}}, {'$unwind': '$tests_user'}, {'$match': {'$expr': {'$eq': ['$tests_user.username', 'alex']}}}, {'$addFields': {'title': '$title'}}, {'$sort': SON([('title', 1)])}])
(0.008) db.tests_book.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$book_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_user', 'let': {'parent__field__0': '$tests_user_favorite_books.user_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_user'}}, {'$unwind': '$tests_user'}, {'$match': {'$expr': {'$eq': ['$tests_user.username', 'jacob']}}}, {'$addFields': {'title': '$title'}}, {'$sort': SON([('title', 1)])}])
(0.004) db.tests_book.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$book_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$set': {'tests_user_favorite_books': {'$cond': {'if': {'$or': [{'$eq': [{'$type': '$tests_user_favorite_books'}, 'missing']}, {'$eq': [{'$size': '$tests_user_favorite_books'}, 0]}]}, 'then': [{}], 'else': '$tests_user_favorite_books'}}}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_user', 'let': {'parent__field__0': '$tests_user_favorite_books.user_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_user'}}, {'$set': {'tests_user': {'$cond': {'if': {'$or': [{'$eq': [{'$type': '$tests_user'}, 'missing']}, {'$eq': [{'$size': '$tests_user'}, 0]}]}, 'then': [{}], 'else': '$tests_user'}}}}, {'$unwind': '$tests_user'}, {'$match': {'$expr': {}}}, {'$group': {'_id': {'tests_user': {'username': '$tests_user.username'}}}}, {'$project': {'tests_user': '$_id.tests_user'}}, {'$sort': SON([('tests_user.username', 1)])}])
(0.005) db.tests_book.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$book_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_user', 'let': {'parent__field__0': '$tests_user_favorite_books.user_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_user'}}, {'$unwind': '$tests_user'}, {'$match': {'$expr': {'$eq': ['$tests_user.username', 'alex']}}}, {'$addFields': {'title': '$title'}}, {'$sort': SON([('title', 1)])}])
----------------------------------------------------------------------
test_reverse_m2m_relation_multiple_attributes (tests.test_filtering.M2MRelationshipTests.test_reverse_m2m_relation_multiple_attributes) ... expected failure
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('2.00'), 'average_rating': 4.0}])
(0.001) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 4.0}])
(0.004) db.tests_book.insert_many([{'title': 'Stranger in a Strage Land', 'price': Decimal128('2.00'), 'average_rating': 3.0}])
(0.002) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1a772359784306a6aeb'), ObjectId('67ddc1a772359784306a6aec')]]}, {'$eq': ['$user_id', ObjectId('67ddc1a772359784306a6ae8')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1a772359784306a6ae8'), 'book_id': ObjectId('67ddc1a772359784306a6aeb')}, {'user_id': ObjectId('67ddc1a772359784306a6ae8'), 'book_id': ObjectId('67ddc1a772359784306a6aec')}])
(0.002) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1a772359784306a6aeb'), ObjectId('67ddc1a772359784306a6aed')]]}, {'$eq': ['$user_id', ObjectId('67ddc1a772359784306a6aea')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1a772359784306a6aea'), 'book_id': ObjectId('67ddc1a772359784306a6aeb')}, {'user_id': ObjectId('67ddc1a772359784306a6aea'), 'book_id': ObjectId('67ddc1a772359784306a6aed')}])
(0.005) db.tests_book.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$book_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_user', 'let': {'parent__field__0': '$tests_user_favorite_books.user_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_user'}}, {'$unwind': '$tests_user'}, {'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$book_id']}]}}}], 'as': 'T4'}}, {'$unwind': '$T4'}, {'$lookup': {'from': 'tests_user', 'let': {'parent__field__0': '$T4.user_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'T5'}}, {'$unwind': '$T5'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_user.status', 1]}, {'$eq': ['$T5.username', 'alex']}]}}}, {'$addFields': {'title': '$title'}}, {'$sort': SON([('title', 1)])}])
----------------------------------------------------------------------
test_filter_with_initial (tests.test_filtering.MiscFilterSetTests.test_filter_with_initial) ... ok
(0.008) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': 'johnson', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': 'johnson', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': 'white', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'carl', 'first_name': '', 'last_name': 'black', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$addFields': {'_id': '$_id'}}, {'$sort': SON([('_id', 1)])}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$status', 0]}}}])
----------------------------------------------------------------------
test_filtering_with_declared_filters (tests.test_filtering.MiscFilterSetTests.test_filtering_with_declared_filters) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': 'johnson', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': 'johnson', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': 'white', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'carl', 'first_name': '', 'last_name': 'black', 'status': 0, 'is_active': False, 'is_employed': False}])
----------------------------------------------------------------------
test_filtering_with_multiple_filters (tests.test_filtering.MiscFilterSetTests.test_filtering_with_multiple_filters) ... ok
(0.005) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': 'johnson', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': 'johnson', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': 'white', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'carl', 'first_name': '', 'last_name': 'black', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$and': [{'$eq': ['$status', 1]}, {'$eq': ['$username', 'alex']}]}}}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {'$and': [{'$eq': ['$status', 2]}, {'$eq': ['$username', 'alex']}]}}}])
----------------------------------------------------------------------
test_filtering_with_widgets (tests.test_filtering.MiscFilterSetTests.test_filtering_with_widgets) ... ok
(0.005) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': 'johnson', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': 'johnson', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': 'white', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'carl', 'first_name': '', 'last_name': 'black', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.003) db.tests_user.aggregate([{'$match': {'$expr': {'$in': ['$last_name', ['johnson']]}}}])
(0.005) db.tests_user.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$last_name', ['johnson']]}, {'$in': ['$username', ['carl']]}]}}}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$last_name', ['johnson']]}, {'$in': ['$username', ['jacob']]}]}}}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$last_name', ['white', 'johnson']]}, {'$in': ['$username', ['jacob', 'carl', 'aaron']]}]}}}])
----------------------------------------------------------------------
test_filtering_without_meta (tests.test_filtering.MiscFilterSetTests.test_filtering_without_meta) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': 'johnson', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': 'johnson', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': 'white', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'carl', 'first_name': '', 'last_name': 'black', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$username', 'alex']}}}])
----------------------------------------------------------------------
test_qs_count (tests.test_filtering.MiscFilterSetTests.test_qs_count) ... ok
(0.007) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': 'johnson', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': 'johnson', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': 'white', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'carl', 'first_name': '', 'last_name': 'black', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$status', 0]}}}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$status', 1]}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$status', 2]}}}])
----------------------------------------------------------------------
test_callable_queryset (tests.test_filtering.ModelChoiceFilterTests.test_callable_queryset) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.003) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {'$and': [{'$lt': ['$_id', ObjectId('67ddc1a872359784306a6f2d')]}, {'$ne': ['$_id', None]}]}}}])
(0.000) db.tests_user.aggregate([{'$match': {'$expr': {'$and': [{'$lt': ['$_id', ObjectId('67ddc1a872359784306a6f2e')]}, {'$ne': ['$_id', None]}]}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.ModelChoiceFilterTests.test_filtering) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a972359784306a6fc7'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 41, 151786)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a972359784306a6fc6'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 41, 151786)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1a972359784306a6fc7'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 41, 151786)}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$_id', ObjectId('67ddc1a972359784306a6fc7')]}}}, {'$limit': 21}])
(0.001) db.tests_comment.aggregate([{'$match': {'$expr': {'$eq': ['$author_id', ObjectId('67ddc1a972359784306a6fc7')]}}}])
----------------------------------------------------------------------
test_filtering_null (tests.test_filtering.ModelChoiceFilterTests.test_filtering_null) ... ok
(0.005) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 19, 44, 41, 346048), 'author_id': None}])
(0.001) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 19, 44, 41, 355040), 'author_id': ObjectId('67ddc1a972359784306a7063')}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {'$or': [{'$eq': [{'$type': '$author_id'}, 'missing']}, {'$eq': ['$author_id', None]}]}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.ModelMultipleChoiceFilterTests.test_filtering) ... ok
(0.010) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Stranger in a Strage Land', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.003) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1a972359784306a7100'), ObjectId('67ddc1a972359784306a70ff')]]}, {'$eq': ['$user_id', ObjectId('67ddc1a972359784306a70fc')]}]}}}, {'$project': {'book_id': 1}}])
(0.002) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1a972359784306a70fc'), 'book_id': ObjectId('67ddc1a972359784306a7100')}, {'user_id': ObjectId('67ddc1a972359784306a70fc'), 'book_id': ObjectId('67ddc1a972359784306a70ff')}])
(0.001) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1a972359784306a7101'), ObjectId('67ddc1a972359784306a70ff')]]}, {'$eq': ['$user_id', ObjectId('67ddc1a972359784306a70fe')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1a972359784306a70fe'), 'book_id': ObjectId('67ddc1a972359784306a7101')}, {'user_id': ObjectId('67ddc1a972359784306a70fe'), 'book_id': ObjectId('67ddc1a972359784306a70ff')}])
(0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1a972359784306a70ff')]]}}}])
(0.004) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1a972359784306a70ff')]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
(0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1a972359784306a7101'), ObjectId('67ddc1a972359784306a70ff')]]}}}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$or': [{'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1a972359784306a7101')]}, {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1a972359784306a70ff')]}]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
(0.002) db.tests_book.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1a972359784306a7100')]]}}}])
(0.002) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1a972359784306a7100')]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
(0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1a972359784306a7102')]]}}}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1a972359784306a7102')]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
----------------------------------------------------------------------
test_filtering_dictionary (tests.test_filtering.ModelMultipleChoiceFilterTests.test_filtering_dictionary) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Stranger in a Strage Land', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.002) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1a972359784306a71a1'), ObjectId('67ddc1a972359784306a71a2')]]}, {'$eq': ['$user_id', ObjectId('67ddc1a972359784306a719e')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1a972359784306a719e'), 'book_id': ObjectId('67ddc1a972359784306a71a1')}, {'user_id': ObjectId('67ddc1a972359784306a719e'), 'book_id': ObjectId('67ddc1a972359784306a71a2')}])
(0.001) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1a972359784306a71a1'), ObjectId('67ddc1a972359784306a71a3')]]}, {'$eq': ['$user_id', ObjectId('67ddc1a972359784306a71a0')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1a972359784306a71a0'), 'book_id': ObjectId('67ddc1a972359784306a71a1')}, {'user_id': ObjectId('67ddc1a972359784306a71a0'), 'book_id': ObjectId('67ddc1a972359784306a71a3')}])
(0.002) db.tests_book.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1a972359784306a71a1')]]}}}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1a972359784306a71a1')]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
(0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1a972359784306a71a1'), ObjectId('67ddc1a972359784306a71a3')]]}}}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$or': [{'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1a972359784306a71a1')]}, {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1a972359784306a71a3')]}]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
(0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1a972359784306a71a2')]]}}}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1a972359784306a71a2')]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
(0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1a972359784306a71a4')]]}}}])
(0.002) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1a972359784306a71a4')]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
----------------------------------------------------------------------
test_filtering_null (tests.test_filtering.ModelMultipleChoiceFilterTests.test_filtering_null) ... ok
(0.004) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Stranger in a Strage Land', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.002) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1aa72359784306a7244'), ObjectId('67ddc1aa72359784306a7243')]]}, {'$eq': ['$user_id', ObjectId('67ddc1aa72359784306a7240')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1aa72359784306a7240'), 'book_id': ObjectId('67ddc1aa72359784306a7244')}, {'user_id': ObjectId('67ddc1aa72359784306a7240'), 'book_id': ObjectId('67ddc1aa72359784306a7243')}])
(0.001) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1aa72359784306a7245'), ObjectId('67ddc1aa72359784306a7243')]]}, {'$eq': ['$user_id', ObjectId('67ddc1aa72359784306a7242')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1aa72359784306a7242'), 'book_id': ObjectId('67ddc1aa72359784306a7245')}, {'user_id': ObjectId('67ddc1aa72359784306a7242'), 'book_id': ObjectId('67ddc1aa72359784306a7243')}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$set': {'tests_user_favorite_books': {'$cond': {'if': {'$or': [{'$eq': [{'$type': '$tests_user_favorite_books'}, 'missing']}, {'$eq': [{'$size': '$tests_user_favorite_books'}, 0]}]}, 'then': [{}], 'else': '$tests_user_favorite_books'}}}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$or': [{'$eq': [{'$type': '$tests_user_favorite_books.book_id'}, 'missing']}, {'$eq': ['$tests_user_favorite_books.book_id', None]}]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}])
----------------------------------------------------------------------
test_filtering_on_all_of_subset_of_choices (tests.test_filtering.ModelMultipleChoiceFilterTests.test_filtering_on_all_of_subset_of_choices) ... ok
(0.005) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Stranger in a Strage Land', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.002) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1aa72359784306a72e5'), ObjectId('67ddc1aa72359784306a72e6')]]}, {'$eq': ['$user_id', ObjectId('67ddc1aa72359784306a72e2')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1aa72359784306a72e2'), 'book_id': ObjectId('67ddc1aa72359784306a72e5')}, {'user_id': ObjectId('67ddc1aa72359784306a72e2'), 'book_id': ObjectId('67ddc1aa72359784306a72e6')}])
(0.002) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1aa72359784306a72e7'), ObjectId('67ddc1aa72359784306a72e5')]]}, {'$eq': ['$user_id', ObjectId('67ddc1aa72359784306a72e4')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1aa72359784306a72e4'), 'book_id': ObjectId('67ddc1aa72359784306a72e7')}, {'user_id': ObjectId('67ddc1aa72359784306a72e4'), 'book_id': ObjectId('67ddc1aa72359784306a72e5')}])
(0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1aa72359784306a72e5'), ObjectId('67ddc1aa72359784306a72e6')]]}}}])
(0.002) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$or': [{'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1aa72359784306a72e5')]}, {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1aa72359784306a72e6')]}]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
----------------------------------------------------------------------
test_filtering_on_non_required_fields (tests.test_filtering.ModelMultipleChoiceFilterTests.test_filtering_on_non_required_fields) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.001) db.tests_book.insert_many([{'title': 'Stranger in a Strage Land', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.002) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1aa72359784306a7387'), ObjectId('67ddc1aa72359784306a7388')]]}, {'$eq': ['$user_id', ObjectId('67ddc1aa72359784306a7384')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1aa72359784306a7384'), 'book_id': ObjectId('67ddc1aa72359784306a7387')}, {'user_id': ObjectId('67ddc1aa72359784306a7384'), 'book_id': ObjectId('67ddc1aa72359784306a7388')}])
(0.001) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1aa72359784306a7387'), ObjectId('67ddc1aa72359784306a7389')]]}, {'$eq': ['$user_id', ObjectId('67ddc1aa72359784306a7386')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1aa72359784306a7386'), 'book_id': ObjectId('67ddc1aa72359784306a7387')}, {'user_id': ObjectId('67ddc1aa72359784306a7386'), 'book_id': ObjectId('67ddc1aa72359784306a7389')}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 19, 44, 42, 487162), 'author_id': ObjectId('67ddc1aa72359784306a7384')}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 19, 44, 42, 487162), 'author_id': ObjectId('67ddc1aa72359784306a7384')}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 19, 44, 42, 487162), 'author_id': None}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1aa72359784306a7385'), ObjectId('67ddc1aa72359784306a7384'), ObjectId('67ddc1aa72359784306a7386')]]}}}])
(0.005) db.tests_article.aggregate([{'$match': {'$expr': {'$or': [{'$eq': ['$author_id', ObjectId('67ddc1aa72359784306a7386')]}, {'$eq': ['$author_id', ObjectId('67ddc1aa72359784306a7384')]}, {'$eq': ['$author_id', ObjectId('67ddc1aa72359784306a7385')]}]}}}, {'$group': {'_id': {'_id': '$_id', 'name': '$name', 'published': '$published', 'author_id': '$author_id'}}}, {'$project': {'_id': '$_id._id', 'name': '$_id.name', 'published': '$_id.published', 'author_id': '$_id.author_id'}}])
(0.002) db.tests_article.aggregate([{'$match': {'$expr': {'$not': {'$or': [{'$eq': [{'$type': '$author_id'}, 'missing']}, {'$eq': ['$author_id', None]}]}}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.MultipleChoiceFilterTests.test_filtering) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.002) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'carl', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$addFields': {'username': '$username'}}, {'$sort': SON([('username', 1)])}])
(0.003) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$status', 0]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {'$or': [{'$eq': ['$status', 1]}, {'$eq': ['$status', 0]}]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
(0.006) db.tests_user.aggregate([{'$match': {'$expr': {'$or': [{'$eq': ['$status', 1]}, {'$eq': ['$status', 0]}, {'$eq': ['$status', 2]}]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
----------------------------------------------------------------------
test_filtering_on_null_choice (tests.test_filtering.MultipleChoiceFilterTests.test_filtering_on_null_choice) ... ERROR
(0.005) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'carl', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
----------------------------------------------------------------------
test_forward_relation (tests.test_filtering.NonSymmetricalSelfReferentialRelationshipTests.test_forward_relation) ... ok
(0.007) db.tests_directednode.insert_many([{'name': 'one'}])
(0.001) db.tests_directednode.insert_many([{'name': 'two'}])
(0.001) db.tests_directednode.insert_many([{'name': 'three'}])
(0.001) db.tests_directednode.insert_many([{'name': 'four'}])
(0.002) db.tests_directednode_outbound_nodes.aggregate([{'$match': {'$expr': {'$and': [{'$eq': ['$from_directednode_id', ObjectId('67ddc1ab72359784306a755f')]}, {'$in': ['$to_directednode_id', [ObjectId('67ddc1ab72359784306a7560')]]}]}}}, {'$project': {'to_directednode_id': 1}}])
(0.001) db.tests_directednode_outbound_nodes.insert_many([{'from_directednode_id': ObjectId('67ddc1ab72359784306a755f'), 'to_directednode_id': ObjectId('67ddc1ab72359784306a7560')}])
(0.002) db.tests_directednode_outbound_nodes.aggregate([{'$match': {'$expr': {'$and': [{'$eq': ['$from_directednode_id', ObjectId('67ddc1ab72359784306a7560')]}, {'$in': ['$to_directednode_id', [ObjectId('67ddc1ab72359784306a7561')]]}]}}}, {'$project': {'to_directednode_id': 1}}])
(0.001) db.tests_directednode_outbound_nodes.insert_many([{'from_directednode_id': ObjectId('67ddc1ab72359784306a7560'), 'to_directednode_id': ObjectId('67ddc1ab72359784306a7561')}])
(0.002) db.tests_directednode_outbound_nodes.aggregate([{'$match': {'$expr': {'$and': [{'$eq': ['$from_directednode_id', ObjectId('67ddc1ab72359784306a7560')]}, {'$in': ['$to_directednode_id', [ObjectId('67ddc1ab72359784306a7562')]]}]}}}, {'$project': {'to_directednode_id': 1}}])
(0.001) db.tests_directednode_outbound_nodes.insert_many([{'from_directednode_id': ObjectId('67ddc1ab72359784306a7560'), 'to_directednode_id': ObjectId('67ddc1ab72359784306a7562')}])
(0.002) db.tests_directednode_outbound_nodes.aggregate([{'$match': {'$expr': {'$and': [{'$eq': ['$from_directednode_id', ObjectId('67ddc1ab72359784306a7562')]}, {'$in': ['$to_directednode_id', [ObjectId('67ddc1ab72359784306a755f')]]}]}}}, {'$project': {'to_directednode_id': 1}}])
(0.001) db.tests_directednode_outbound_nodes.insert_many([{'from_directednode_id': ObjectId('67ddc1ab72359784306a7562'), 'to_directednode_id': ObjectId('67ddc1ab72359784306a755f')}])
(0.002) db.tests_directednode.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1ab72359784306a755f')]]}}}])
(0.004) db.tests_directednode.aggregate([{'$lookup': {'from': 'tests_directednode_outbound_nodes', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$from_directednode_id']}]}}}], 'as': 'tests_directednode_outbound_nodes'}}, {'$unwind': '$tests_directednode_outbound_nodes'}, {'$match': {'$expr': {'$eq': ['$tests_directednode_outbound_nodes.to_directednode_id', ObjectId('67ddc1ab72359784306a755f')]}}}, {'$group': {'_id': {'_id': '$_id', 'name': '$name'}}}, {'$project': {'_id': '$_id._id', 'name': '$_id.name'}}, {'$sort': SON([('_id', 1)])}])
----------------------------------------------------------------------
test_reverse_relation (tests.test_filtering.NonSymmetricalSelfReferentialRelationshipTests.test_reverse_relation) ... ok
(0.011) db.tests_directednode.insert_many([{'name': 'one'}])
(0.001) db.tests_directednode.insert_many([{'name': 'two'}])
(0.001) db.tests_directednode.insert_many([{'name': 'three'}])
(0.003) db.tests_directednode.insert_many([{'name': 'four'}])
(0.003) db.tests_directednode_outbound_nodes.aggregate([{'$match': {'$expr': {'$and': [{'$eq': ['$from_directednode_id', ObjectId('67ddc1ab72359784306a75fe')]}, {'$in': ['$to_directednode_id', [ObjectId('67ddc1ab72359784306a75ff')]]}]}}}, {'$project': {'to_directednode_id': 1}}])
(0.004) db.tests_directednode_outbound_nodes.insert_many([{'from_directednode_id': ObjectId('67ddc1ab72359784306a75fe'), 'to_directednode_id': ObjectId('67ddc1ab72359784306a75ff')}])
(0.003) db.tests_directednode_outbound_nodes.aggregate([{'$match': {'$expr': {'$and': [{'$eq': ['$from_directednode_id', ObjectId('67ddc1ab72359784306a75ff')]}, {'$in': ['$to_directednode_id', [ObjectId('67ddc1ab72359784306a7600')]]}]}}}, {'$project': {'to_directednode_id': 1}}])
(0.003) db.tests_directednode_outbound_nodes.insert_many([{'from_directednode_id': ObjectId('67ddc1ab72359784306a75ff'), 'to_directednode_id': ObjectId('67ddc1ab72359784306a7600')}])
(0.002) db.tests_directednode_outbound_nodes.aggregate([{'$match': {'$expr': {'$and': [{'$eq': ['$from_directednode_id', ObjectId('67ddc1ab72359784306a75ff')]}, {'$in': ['$to_directednode_id', [ObjectId('67ddc1ab72359784306a7601')]]}]}}}, {'$project': {'to_directednode_id': 1}}])
(0.003) db.tests_directednode_outbound_nodes.insert_many([{'from_directednode_id': ObjectId('67ddc1ab72359784306a75ff'), 'to_directednode_id': ObjectId('67ddc1ab72359784306a7601')}])
(0.002) db.tests_directednode_outbound_nodes.aggregate([{'$match': {'$expr': {'$and': [{'$eq': ['$from_directednode_id', ObjectId('67ddc1ab72359784306a7601')]}, {'$in': ['$to_directednode_id', [ObjectId('67ddc1ab72359784306a75fe')]]}]}}}, {'$project': {'to_directednode_id': 1}}])
(0.001) db.tests_directednode_outbound_nodes.insert_many([{'from_directednode_id': ObjectId('67ddc1ab72359784306a7601'), 'to_directednode_id': ObjectId('67ddc1ab72359784306a75fe')}])
(0.002) db.tests_directednode.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1ab72359784306a75fe')]]}}}])
(0.005) db.tests_directednode.aggregate([{'$lookup': {'from': 'tests_directednode_outbound_nodes', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$to_directednode_id']}]}}}], 'as': 'tests_directednode_outbound_nodes'}}, {'$unwind': '$tests_directednode_outbound_nodes'}, {'$match': {'$expr': {'$eq': ['$tests_directednode_outbound_nodes.from_directednode_id', ObjectId('67ddc1ab72359784306a75fe')]}}}, {'$group': {'_id': {'_id': '$_id', 'name': '$name'}}}, {'$project': {'_id': '$_id._id', 'name': '$_id.name'}}, {'$sort': SON([('_id', 1)])}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.NumberFilterTests.test_filtering) ... ok
(0.010) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('10.0'), 'average_rating': 4.8}])
(0.001) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('15.0'), 'average_rating': 4.6}])
(0.003) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('20.0'), 'average_rating': 4.3}])
(0.002) db.tests_book.aggregate([{'$match': {'$expr': {'$eq': ['$price', Decimal128('10')]}}}])
----------------------------------------------------------------------
test_o2o_relation (tests.test_filtering.O2ORelationshipTests.test_o2o_relation) ... ok
(0.007) db.tests_account.insert_many([{'name': 'account1', 'in_good_standing': False, 'friendly': False}])
(0.001) db.tests_account.insert_many([{'name': 'account2', 'in_good_standing': True, 'friendly': True}])
(0.001) db.tests_account.insert_many([{'name': 'account3', 'in_good_standing': True, 'friendly': False}])
(0.001) db.tests_account.insert_many([{'name': 'account4', 'in_good_standing': False, 'friendly': True}])
(0.001) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ab72359784306a7737'), 'likes_coffee': True, 'likes_tea': False}])
(0.001) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ab72359784306a7738'), 'likes_coffee': False, 'likes_tea': True}])
(0.002) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ab72359784306a7739'), 'likes_coffee': True, 'likes_tea': True}])
(0.001) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ab72359784306a773a'), 'likes_coffee': False, 'likes_tea': False}])
(0.002) db.tests_profile.aggregate([{'$match': {'$expr': {}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.003) db.tests_account.aggregate([{'$match': {'$expr': {'$eq': ['$_id', ObjectId('67ddc1ab72359784306a7737')]}}}, {'$limit': 21}])
(0.002) db.tests_profile.aggregate([{'$match': {'$expr': {'$eq': ['$account_id', ObjectId('67ddc1ab72359784306a7737')]}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.001) db.tests_profile.aggregate([{'$match': {'$expr': {'$eq': ['$account_id', ObjectId('67ddc1ab72359784306a7737')]}}}])
----------------------------------------------------------------------
test_o2o_relation_attribute (tests.test_filtering.O2ORelationshipTests.test_o2o_relation_attribute) ... ok
(0.003) db.tests_account.insert_many([{'name': 'account1', 'in_good_standing': False, 'friendly': False}])
(0.000) db.tests_account.insert_many([{'name': 'account2', 'in_good_standing': True, 'friendly': True}])
(0.000) db.tests_account.insert_many([{'name': 'account3', 'in_good_standing': True, 'friendly': False}])
(0.000) db.tests_account.insert_many([{'name': 'account4', 'in_good_standing': False, 'friendly': True}])
(0.000) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a77d6'), 'likes_coffee': True, 'likes_tea': False}])
(0.000) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a77d7'), 'likes_coffee': False, 'likes_tea': True}])
(0.000) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a77d8'), 'likes_coffee': True, 'likes_tea': True}])
(0.000) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a77d9'), 'likes_coffee': False, 'likes_tea': False}])
(0.001) db.tests_profile.aggregate([{'$match': {'$expr': {}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.001) db.tests_profile.aggregate([{'$lookup': {'from': 'tests_account', 'let': {'parent__field__0': '$account_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_account'}}, {'$unwind': '$tests_account'}, {'$match': {'$expr': {'$eq': ['$tests_account.in_good_standing', True]}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.001) db.tests_profile.aggregate([{'$lookup': {'from': 'tests_account', 'let': {'parent__field__0': '$account_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_account'}}, {'$unwind': '$tests_account'}, {'$match': {'$expr': {'$eq': ['$tests_account.in_good_standing', True]}}}])
----------------------------------------------------------------------
test_o2o_relation_attribute2 (tests.test_filtering.O2ORelationshipTests.test_o2o_relation_attribute2) ... ok
(0.005) db.tests_account.insert_many([{'name': 'account1', 'in_good_standing': False, 'friendly': False}])
(0.001) db.tests_account.insert_many([{'name': 'account2', 'in_good_standing': True, 'friendly': True}])
(0.000) db.tests_account.insert_many([{'name': 'account3', 'in_good_standing': True, 'friendly': False}])
(0.000) db.tests_account.insert_many([{'name': 'account4', 'in_good_standing': False, 'friendly': True}])
(0.001) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a7875'), 'likes_coffee': True, 'likes_tea': False}])
(0.000) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a7876'), 'likes_coffee': False, 'likes_tea': True}])
(0.000) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a7877'), 'likes_coffee': True, 'likes_tea': True}])
(0.000) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a7878'), 'likes_coffee': False, 'likes_tea': False}])
(0.001) db.tests_profile.aggregate([{'$match': {'$expr': {}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.002) db.tests_profile.aggregate([{'$lookup': {'from': 'tests_account', 'let': {'parent__field__0': '$account_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_account'}}, {'$unwind': '$tests_account'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_account.in_good_standing', True]}, {'$eq': ['$tests_account.friendly', True]}]}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.001) db.tests_profile.aggregate([{'$lookup': {'from': 'tests_account', 'let': {'parent__field__0': '$account_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'tests_account'}}, {'$unwind': '$tests_account'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_account.in_good_standing', True]}, {'$eq': ['$tests_account.friendly', True]}]}}}])
----------------------------------------------------------------------
test_o2o_relation_dictionary (tests.test_filtering.O2ORelationshipTests.test_o2o_relation_dictionary) ... ok
(0.002) db.tests_account.insert_many([{'name': 'account1', 'in_good_standing': False, 'friendly': False}])
(0.000) db.tests_account.insert_many([{'name': 'account2', 'in_good_standing': True, 'friendly': True}])
(0.000) db.tests_account.insert_many([{'name': 'account3', 'in_good_standing': True, 'friendly': False}])
(0.000) db.tests_account.insert_many([{'name': 'account4', 'in_good_standing': False, 'friendly': True}])
(0.000) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a7914'), 'likes_coffee': True, 'likes_tea': False}])
(0.000) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a7915'), 'likes_coffee': False, 'likes_tea': True}])
(0.000) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a7916'), 'likes_coffee': True, 'likes_tea': True}])
(0.000) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a7917'), 'likes_coffee': False, 'likes_tea': False}])
(0.001) db.tests_profile.aggregate([{'$match': {'$expr': {}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.000) db.tests_account.aggregate([{'$match': {'$expr': {'$eq': ['$_id', ObjectId('67ddc1ac72359784306a7914')]}}}, {'$limit': 21}])
(0.000) db.tests_profile.aggregate([{'$match': {'$expr': {'$eq': ['$account_id', ObjectId('67ddc1ac72359784306a7914')]}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.000) db.tests_profile.aggregate([{'$match': {'$expr': {'$eq': ['$account_id', ObjectId('67ddc1ac72359784306a7914')]}}}])
----------------------------------------------------------------------
test_reverse_o2o_relation (tests.test_filtering.O2ORelationshipTests.test_reverse_o2o_relation) ... ok
(0.003) db.tests_account.insert_many([{'name': 'account1', 'in_good_standing': False, 'friendly': False}])
(0.000) db.tests_account.insert_many([{'name': 'account2', 'in_good_standing': True, 'friendly': True}])
(0.000) db.tests_account.insert_many([{'name': 'account3', 'in_good_standing': True, 'friendly': False}])
(0.000) db.tests_account.insert_many([{'name': 'account4', 'in_good_standing': False, 'friendly': True}])
(0.001) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a79b3'), 'likes_coffee': True, 'likes_tea': False}])
(0.001) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a79b4'), 'likes_coffee': False, 'likes_tea': True}])
(0.001) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a79b5'), 'likes_coffee': True, 'likes_tea': True}])
(0.000) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a79b6'), 'likes_coffee': False, 'likes_tea': False}])
(0.001) db.tests_account.aggregate([{'$match': {'$expr': {}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.001) db.tests_profile.aggregate([{'$match': {'$expr': {'$eq': ['$_id', ObjectId('67ddc1ac72359784306a79b7')]}}}, {'$limit': 21}])
(0.002) db.tests_account.aggregate([{'$lookup': {'from': 'tests_profile', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$account_id']}]}}}], 'as': 'tests_profile'}}, {'$unwind': '$tests_profile'}, {'$match': {'$expr': {'$eq': ['$tests_profile._id', ObjectId('67ddc1ac72359784306a79b7')]}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.001) db.tests_account.aggregate([{'$lookup': {'from': 'tests_profile', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$account_id']}]}}}], 'as': 'tests_profile'}}, {'$unwind': '$tests_profile'}, {'$match': {'$expr': {'$eq': ['$tests_profile._id', ObjectId('67ddc1ac72359784306a79b7')]}}}])
----------------------------------------------------------------------
test_reverse_o2o_relation_attribute (tests.test_filtering.O2ORelationshipTests.test_reverse_o2o_relation_attribute) ... ok
(0.005) db.tests_account.insert_many([{'name': 'account1', 'in_good_standing': False, 'friendly': False}])
(0.001) db.tests_account.insert_many([{'name': 'account2', 'in_good_standing': True, 'friendly': True}])
(0.001) db.tests_account.insert_many([{'name': 'account3', 'in_good_standing': True, 'friendly': False}])
(0.001) db.tests_account.insert_many([{'name': 'account4', 'in_good_standing': False, 'friendly': True}])
(0.001) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a7a52'), 'likes_coffee': True, 'likes_tea': False}])
(0.001) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a7a53'), 'likes_coffee': False, 'likes_tea': True}])
(0.001) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a7a54'), 'likes_coffee': True, 'likes_tea': True}])
(0.001) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a7a55'), 'likes_coffee': False, 'likes_tea': False}])
(0.001) db.tests_account.aggregate([{'$match': {'$expr': {}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.002) db.tests_account.aggregate([{'$lookup': {'from': 'tests_profile', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$account_id']}]}}}], 'as': 'tests_profile'}}, {'$unwind': '$tests_profile'}, {'$match': {'$expr': {'$eq': ['$tests_profile.likes_coffee', True]}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.002) db.tests_account.aggregate([{'$lookup': {'from': 'tests_profile', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$account_id']}]}}}], 'as': 'tests_profile'}}, {'$unwind': '$tests_profile'}, {'$match': {'$expr': {'$eq': ['$tests_profile.likes_coffee', True]}}}])
----------------------------------------------------------------------
test_reverse_o2o_relation_attribute2 (tests.test_filtering.O2ORelationshipTests.test_reverse_o2o_relation_attribute2) ... ok
(0.003) db.tests_account.insert_many([{'name': 'account1', 'in_good_standing': False, 'friendly': False}])
(0.000) db.tests_account.insert_many([{'name': 'account2', 'in_good_standing': True, 'friendly': True}])
(0.000) db.tests_account.insert_many([{'name': 'account3', 'in_good_standing': True, 'friendly': False}])
(0.000) db.tests_account.insert_many([{'name': 'account4', 'in_good_standing': False, 'friendly': True}])
(0.001) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a7af1'), 'likes_coffee': True, 'likes_tea': False}])
(0.000) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a7af2'), 'likes_coffee': False, 'likes_tea': True}])
(0.000) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a7af3'), 'likes_coffee': True, 'likes_tea': True}])
(0.000) db.tests_profile.insert_many([{'account_id': ObjectId('67ddc1ac72359784306a7af4'), 'likes_coffee': False, 'likes_tea': False}])
(0.001) db.tests_account.aggregate([{'$match': {'$expr': {}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.003) db.tests_account.aggregate([{'$lookup': {'from': 'tests_profile', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$account_id']}]}}}], 'as': 'tests_profile'}}, {'$unwind': '$tests_profile'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_profile.likes_coffee', True]}, {'$eq': ['$tests_profile.likes_tea', True]}]}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.003) db.tests_account.aggregate([{'$lookup': {'from': 'tests_profile', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$account_id']}]}}}], 'as': 'tests_profile'}}, {'$unwind': '$tests_profile'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_profile.likes_coffee', True]}, {'$eq': ['$tests_profile.likes_tea', True]}]}}}])
----------------------------------------------------------------------
test_csv_input (tests.test_filtering.OrderingFilterTests.test_csv_input) ... ok
(0.011) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.002) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.002) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'carl', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$project': {'username': 1}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$project': {'username': 1}}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$project': {'username': 1}}])
----------------------------------------------------------------------
test_ordering (tests.test_filtering.OrderingFilterTests.test_ordering) ... ok
(0.006) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.002) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'carl', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.005) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$project': {'username': 1}}, {'$sort': SON([('username', 1)])}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$project': {'username': 1}}, {'$sort': SON([('username', 1)])}])
----------------------------------------------------------------------
test_ordering_with_select_widget (tests.test_filtering.OrderingFilterTests.test_ordering_with_select_widget) ... ok
(0.010) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.003) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.002) db.tests_user.insert_many([{'username': 'carl', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$project': {'username': 1}}, {'$sort': SON([('username', 1)])}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.RangeFilterTests.test_filtering) ... ok
(0.009) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('10.0'), 'average_rating': 4.8}])
(0.001) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('15.0'), 'average_rating': 4.6}])
(0.001) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('20.0'), 'average_rating': 4.3}])
(0.001) db.tests_book.insert_many([{'title': 'Refund', 'price': Decimal128('-10.0'), 'average_rating': 5.0}])
(0.001) db.tests_book.insert_many([{'title': 'Free Book', 'price': Decimal128('0.0'), 'average_rating': 0.0}])
(0.003) db.tests_book.aggregate([{'$match': {'$expr': {}}}, {'$addFields': {'title': '$title'}}, {'$sort': SON([('title', 1)])}])
(0.002) db.tests_book.aggregate([{'$match': {'$expr': {'$and': [{'$or': [{'$or': [{'$eq': [{'$type': Decimal128('5')}, 'missing']}, {'$eq': [Decimal128('5'), None]}]}, {'$gte': ['$price', Decimal128('5')]}]}, {'$or': [{'$or': [{'$eq': [{'$type': Decimal128('15')}, 'missing']}, {'$eq': [Decimal128('15'), None]}]}, {'$lte': ['$price', Decimal128('15')]}]}]}}}, {'$addFields': {'title': '$title'}}, {'$sort': SON([('title', 1)])}])
(0.002) db.tests_book.aggregate([{'$match': {'$expr': {'$gte': ['$price', Decimal128('11')]}}}, {'$addFields': {'title': '$title'}}, {'$sort': SON([('title', 1)])}])
(0.004) db.tests_book.aggregate([{'$match': {'$expr': {'$and': [{'$lte': ['$price', Decimal128('19')]}, {'$ne': ['$price', None]}]}}}, {'$addFields': {'title': '$title'}}, {'$sort': SON([('title', 1)])}])
(0.005) db.tests_book.aggregate([{'$match': {'$expr': {'$and': [{'$or': [{'$or': [{'$eq': [{'$type': Decimal128('0')}, 'missing']}, {'$eq': [Decimal128('0'), None]}]}, {'$gte': ['$price', Decimal128('0')]}]}, {'$or': [{'$or': [{'$eq': [{'$type': Decimal128('12')}, 'missing']}, {'$eq': [Decimal128('12'), None]}]}, {'$lte': ['$price', Decimal128('12')]}]}]}}}, {'$addFields': {'title': '$title'}}, {'$sort': SON([('title', 1)])}])
(0.007) db.tests_book.aggregate([{'$match': {'$expr': {'$and': [{'$or': [{'$or': [{'$eq': [{'$type': Decimal128('-11')}, 'missing']}, {'$eq': [Decimal128('-11'), None]}]}, {'$gte': ['$price', Decimal128('-11')]}]}, {'$or': [{'$or': [{'$eq': [{'$type': Decimal128('0')}, 'missing']}, {'$eq': [Decimal128('0'), None]}]}, {'$lte': ['$price', Decimal128('0')]}]}]}}}, {'$addFields': {'title': '$title'}}, {'$sort': SON([('title', 1)])}])
(0.004) db.tests_book.aggregate([{'$match': {'$expr': {'$and': [{'$or': [{'$or': [{'$eq': [{'$type': Decimal128('0')}, 'missing']}, {'$eq': [Decimal128('0'), None]}]}, {'$gte': ['$price', Decimal128('0')]}]}, {'$or': [{'$or': [{'$eq': [{'$type': Decimal128('0')}, 'missing']}, {'$eq': [Decimal128('0'), None]}]}, {'$lte': ['$price', Decimal128('0')]}]}]}}}, {'$addFields': {'title': '$title'}}, {'$sort': SON([('title', 1)])}])
----------------------------------------------------------------------
test_relation (tests.test_filtering.SymmetricalSelfReferentialRelationshipTests.test_relation) ... ok
(0.008) db.tests_node.insert_many([{'name': 'one'}])
(0.003) db.tests_node.insert_many([{'name': 'two'}])
(0.002) db.tests_node.insert_many([{'name': 'three'}])
(0.002) db.tests_node.insert_many([{'name': 'four'}])
(0.002) db.tests_node_adjacents.aggregate([{'$match': {'$expr': {'$and': [{'$eq': ['$from_node_id', ObjectId('67ddc1ae72359784306a7dfd')]}, {'$in': ['$to_node_id', [ObjectId('67ddc1ae72359784306a7dfe')]]}]}}}, {'$project': {'to_node_id': 1}}])
(0.001) db.tests_node_adjacents.insert_many([{'from_node_id': ObjectId('67ddc1ae72359784306a7dfd'), 'to_node_id': ObjectId('67ddc1ae72359784306a7dfe')}])
(0.005) db.tests_node_adjacents.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$from_node_id', [ObjectId('67ddc1ae72359784306a7dfe')]]}, {'$eq': ['$to_node_id', ObjectId('67ddc1ae72359784306a7dfd')]}]}}}, {'$project': {'from_node_id': 1}}])
(0.003) db.tests_node_adjacents.insert_many([{'from_node_id': ObjectId('67ddc1ae72359784306a7dfe'), 'to_node_id': ObjectId('67ddc1ae72359784306a7dfd')}])
(0.003) db.tests_node_adjacents.aggregate([{'$match': {'$expr': {'$and': [{'$eq': ['$from_node_id', ObjectId('67ddc1ae72359784306a7dfe')]}, {'$in': ['$to_node_id', [ObjectId('67ddc1ae72359784306a7dff')]]}]}}}, {'$project': {'to_node_id': 1}}])
(0.003) db.tests_node_adjacents.insert_many([{'from_node_id': ObjectId('67ddc1ae72359784306a7dfe'), 'to_node_id': ObjectId('67ddc1ae72359784306a7dff')}])
(0.003) db.tests_node_adjacents.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$from_node_id', [ObjectId('67ddc1ae72359784306a7dff')]]}, {'$eq': ['$to_node_id', ObjectId('67ddc1ae72359784306a7dfe')]}]}}}, {'$project': {'from_node_id': 1}}])
(0.002) db.tests_node_adjacents.insert_many([{'from_node_id': ObjectId('67ddc1ae72359784306a7dff'), 'to_node_id': ObjectId('67ddc1ae72359784306a7dfe')}])
(0.003) db.tests_node_adjacents.aggregate([{'$match': {'$expr': {'$and': [{'$eq': ['$from_node_id', ObjectId('67ddc1ae72359784306a7dfe')]}, {'$in': ['$to_node_id', [ObjectId('67ddc1ae72359784306a7e00')]]}]}}}, {'$project': {'to_node_id': 1}}])
(0.003) db.tests_node_adjacents.insert_many([{'from_node_id': ObjectId('67ddc1ae72359784306a7dfe'), 'to_node_id': ObjectId('67ddc1ae72359784306a7e00')}])
(0.002) db.tests_node_adjacents.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$from_node_id', [ObjectId('67ddc1ae72359784306a7e00')]]}, {'$eq': ['$to_node_id', ObjectId('67ddc1ae72359784306a7dfe')]}]}}}, {'$project': {'from_node_id': 1}}])
(0.004) db.tests_node_adjacents.insert_many([{'from_node_id': ObjectId('67ddc1ae72359784306a7e00'), 'to_node_id': ObjectId('67ddc1ae72359784306a7dfe')}])
(0.002) db.tests_node_adjacents.aggregate([{'$match': {'$expr': {'$and': [{'$eq': ['$from_node_id', ObjectId('67ddc1ae72359784306a7e00')]}, {'$in': ['$to_node_id', [ObjectId('67ddc1ae72359784306a7dfd')]]}]}}}, {'$project': {'to_node_id': 1}}])
(0.002) db.tests_node_adjacents.insert_many([{'from_node_id': ObjectId('67ddc1ae72359784306a7e00'), 'to_node_id': ObjectId('67ddc1ae72359784306a7dfd')}])
(0.002) db.tests_node_adjacents.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$from_node_id', [ObjectId('67ddc1ae72359784306a7dfd')]]}, {'$eq': ['$to_node_id', ObjectId('67ddc1ae72359784306a7e00')]}]}}}, {'$project': {'from_node_id': 1}}])
(0.001) db.tests_node_adjacents.insert_many([{'from_node_id': ObjectId('67ddc1ae72359784306a7dfd'), 'to_node_id': ObjectId('67ddc1ae72359784306a7e00')}])
(0.003) db.tests_node.aggregate([{'$match': {'$expr': {'$in': ['$_id', [ObjectId('67ddc1ae72359784306a7dfd')]]}}}])
(0.007) db.tests_node.aggregate([{'$lookup': {'from': 'tests_node_adjacents', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$from_node_id']}]}}}], 'as': 'tests_node_adjacents'}}, {'$unwind': '$tests_node_adjacents'}, {'$match': {'$expr': {'$eq': ['$tests_node_adjacents.to_node_id', ObjectId('67ddc1ae72359784306a7dfd')]}}}, {'$group': {'_id': {'_id': '$_id', 'name': '$name'}}}, {'$project': {'_id': '$_id._id', 'name': '$_id.name'}}, {'$sort': SON([('_id', 1)])}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.TimeFilterTests.test_filtering) ... ok
(0.008) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1ae72359784306a7ea0'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 46)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1ae72359784306a7ea0'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 34, 46)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1ae72359784306a7ea0'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 44, 46)}])
(0.001) db.tests_comment.insert_many([{'text': '', 'author_id': ObjectId('67ddc1ae72359784306a7ea0'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 19, 34, 46)}])
(0.002) db.tests_comment.aggregate([{'$match': {'$expr': {'$eq': ['$time', datetime.datetime(1, 1, 1, 19, 34, 46)]}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.TimeRangeFilterTests.test_filtering) ... ok
(0.006) db.tests_user.insert_many([{'username': 'adam', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_comment.insert_many([{'text': 'test', 'author_id': ObjectId('67ddc1ae72359784306a7f3c'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 7, 30)}])
(0.001) db.tests_comment.insert_many([{'text': 'test', 'author_id': ObjectId('67ddc1ae72359784306a7f3c'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 8, 0)}])
(0.001) db.tests_comment.insert_many([{'text': 'test', 'author_id': ObjectId('67ddc1ae72359784306a7f3c'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 9, 30)}])
(0.001) db.tests_comment.insert_many([{'text': 'test', 'author_id': ObjectId('67ddc1ae72359784306a7f3c'), 'date': datetime.datetime(2025, 3, 21, 0, 0), 'time': datetime.datetime(1, 1, 1, 11, 0)}])
(0.002) db.tests_comment.aggregate([{'$match': {'$expr': {'$and': [{'$or': [{'$or': [{'$eq': [{'$type': datetime.datetime(1, 1, 1, 8, 0)}, 'missing']}, {'$eq': [datetime.datetime(1, 1, 1, 8, 0), None]}]}, {'$gte': ['$time', datetime.datetime(1, 1, 1, 8, 0)]}]}, {'$or': [{'$or': [{'$eq': [{'$type': datetime.datetime(1, 1, 1, 10, 0)}, 'missing']}, {'$eq': [datetime.datetime(1, 1, 1, 10, 0), None]}]}, {'$lte': ['$time', datetime.datetime(1, 1, 1, 10, 0)]}]}]}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.TransformedQueryExpressionFilterTests.test_filtering) ... ok
(0.005) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 18, 44, 47, 127229), 'author_id': ObjectId('67ddc1af72359784306a7fd8')}])
(0.001) db.tests_article.insert_many([{'name': '', 'published': datetime.datetime(2025, 3, 21, 16, 44, 47, 127229), 'author_id': ObjectId('67ddc1af72359784306a7fd8')}])
(0.001) db.tests_article.aggregate([{'$match': {'$expr': {'$gte': [{'$hour': {'date': '$published', 'timezone': 'UTC'}}, 17]}}}])
----------------------------------------------------------------------
test_filtering (tests.test_filtering.TypedMultipleChoiceFilterTests.test_filtering) ... ok
(0.004) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'carl', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$addFields': {'username': '$username'}}, {'$sort': SON([('username', 1)])}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$status', 0]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {'$or': [{'$eq': ['$status', 1]}, {'$eq': ['$status', 0]}]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {'$or': [{'$eq': ['$status', 1]}, {'$eq': ['$status', 0]}, {'$eq': ['$status', 2]}]}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}, {'$sort': SON([('username', 1)])}])
----------------------------------------------------------------------
test_default_field_with_assigning_model (tests.test_filters.AllValuesFilterTests.test_default_field_with_assigning_model) ... ok
----------------------------------------------------------------------
test_default_field_without_assigning_model (tests.test_filters.AllValuesFilterTests.test_default_field_without_assigning_model) ... ok
----------------------------------------------------------------------
test_empty_value_in_choices (tests.test_filters.AllValuesFilterTests.test_empty_value_in_choices) ... ok
(0.009) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$group': {'_id': {'username': '$username'}}}, {'$project': {'username': '$_id.username'}}, {'$sort': SON([('username', 1)])}])
----------------------------------------------------------------------
test_filtering (tests.test_filters.BaseInFilterTests.test_filtering) ... ok
----------------------------------------------------------------------
test_filtering (tests.test_filters.BaseRangeFilterTests.test_filtering) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.BooleanFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_filtering (tests.test_filters.BooleanFilterTests.test_filtering) ... ok
----------------------------------------------------------------------
test_filtering_exclude (tests.test_filters.BooleanFilterTests.test_filtering_exclude) ... ok
----------------------------------------------------------------------
test_filtering_lookup_expr (tests.test_filters.BooleanFilterTests.test_filtering_lookup_expr) ... ok
----------------------------------------------------------------------
test_filtering_skipped_with_blank_value (tests.test_filters.BooleanFilterTests.test_filtering_skipped_with_blank_value) ... ok
----------------------------------------------------------------------
test_filtering_skipped_with_none_value (tests.test_filters.BooleanFilterTests.test_filtering_skipped_with_none_value) ... ok
----------------------------------------------------------------------
test_concrete_field (tests.test_filters.CSVFilterTests.test_concrete_field) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.CSVFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_field_with_lookup_expr (tests.test_filters.CSVFilterTests.test_field_with_lookup_expr) ... ok
----------------------------------------------------------------------
test_filtering (tests.test_filters.CSVFilterTests.test_filtering) ... ok
----------------------------------------------------------------------
test_filtering_skipped_with_none_value (tests.test_filters.CSVFilterTests.test_filtering_skipped_with_none_value) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.CharFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_callable_choices (tests.test_filters.ChoiceFilterTests.test_callable_choices) ... ok
----------------------------------------------------------------------
test_callable_choices_is_lazy (tests.test_filters.ChoiceFilterTests.test_callable_choices_is_lazy) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.ChoiceFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_empty_choice (tests.test_filters.ChoiceFilterTests.test_empty_choice) ... ok
----------------------------------------------------------------------
test_null_choice (tests.test_filters.ChoiceFilterTests.test_null_choice) ... ok
----------------------------------------------------------------------
test_null_multiplechoice (tests.test_filters.ChoiceFilterTests.test_null_multiplechoice) ... ok
----------------------------------------------------------------------
test_settings_overrides (tests.test_filters.ChoiceFilterTests.test_settings_overrides) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.DateFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.DateFromToRangeFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_filtering_ignores_lookup_expr (tests.test_filters.DateFromToRangeFilterTests.test_filtering_ignores_lookup_expr) ... ok
----------------------------------------------------------------------
test_filtering_range (tests.test_filters.DateFromToRangeFilterTests.test_filtering_range) ... ok
----------------------------------------------------------------------
test_filtering_skipped_with_none_value (tests.test_filters.DateFromToRangeFilterTests.test_filtering_skipped_with_none_value) ... ok
----------------------------------------------------------------------
test_filtering_start (tests.test_filters.DateFromToRangeFilterTests.test_filtering_start) ... ok
----------------------------------------------------------------------
test_filtering_stop (tests.test_filters.DateFromToRangeFilterTests.test_filtering_stop) ... ok
----------------------------------------------------------------------
test_choices_and_filters_mismatch (tests.test_filters.DateRangeFilterTests.test_choices_and_filters_mismatch) ... ok
----------------------------------------------------------------------
test_choices_with_optgroups_dont_mistmatch (tests.test_filters.DateRangeFilterTests.test_choices_with_optgroups_dont_mistmatch) ... ok
----------------------------------------------------------------------
test_creating (tests.test_filters.DateRangeFilterTests.test_creating) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.DateRangeFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_filtering (tests.test_filters.DateRangeFilterTests.test_filtering) ... ok
----------------------------------------------------------------------
test_filtering_for_7_days (tests.test_filters.DateRangeFilterTests.test_filtering_for_7_days) ... ok
----------------------------------------------------------------------
test_filtering_for_this_month (tests.test_filters.DateRangeFilterTests.test_filtering_for_this_month) ... ok
----------------------------------------------------------------------
test_filtering_for_this_year (tests.test_filters.DateRangeFilterTests.test_filtering_for_this_year) ... ok
----------------------------------------------------------------------
test_filtering_for_today (tests.test_filters.DateRangeFilterTests.test_filtering_for_today) ... ok
----------------------------------------------------------------------
test_filtering_for_yesterday (tests.test_filters.DateRangeFilterTests.test_filtering_for_yesterday) ... ok
----------------------------------------------------------------------
test_filtering_skipped_with_out_of_range_value (tests.test_filters.DateRangeFilterTests.test_filtering_skipped_with_out_of_range_value) ... ok
----------------------------------------------------------------------
test_grouped_choices_as_dictionary (tests.test_filters.DateRangeFilterTests.test_grouped_choices_as_dictionary) ... ok
----------------------------------------------------------------------
test_grouped_choices_error (tests.test_filters.DateRangeFilterTests.test_grouped_choices_error) ... skipped 'Django 5.0 introduced new dictionary choices option'
----------------------------------------------------------------------
test_default_field (tests.test_filters.DateTimeFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.DateTimeFromToRangeFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_filtering_ignores_lookup_expr (tests.test_filters.DateTimeFromToRangeFilterTests.test_filtering_ignores_lookup_expr) ... ok
----------------------------------------------------------------------
test_filtering_range (tests.test_filters.DateTimeFromToRangeFilterTests.test_filtering_range) ... ok
----------------------------------------------------------------------
test_filtering_skipped_with_none_value (tests.test_filters.DateTimeFromToRangeFilterTests.test_filtering_skipped_with_none_value) ... ok
----------------------------------------------------------------------
test_filtering_start (tests.test_filters.DateTimeFromToRangeFilterTests.test_filtering_start) ... ok
----------------------------------------------------------------------
test_filtering_stop (tests.test_filters.DateTimeFromToRangeFilterTests.test_filtering_stop) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.DurationFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_creation (tests.test_filters.FilterTests.test_creation) ... ok
----------------------------------------------------------------------
test_creation_order (tests.test_filters.FilterTests.test_creation_order) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.FilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_field_extra_params (tests.test_filters.FilterTests.test_field_extra_params) ... ok
----------------------------------------------------------------------
test_field_params (tests.test_filters.FilterTests.test_field_params) ... ok
----------------------------------------------------------------------
test_field_required_default (tests.test_filters.FilterTests.test_field_required_default) ... ok
----------------------------------------------------------------------
test_field_with_single_lookup_expr (tests.test_filters.FilterTests.test_field_with_single_lookup_expr) ... ok
----------------------------------------------------------------------
test_filter_using_method (tests.test_filters.FilterTests.test_filter_using_method) ... ok
----------------------------------------------------------------------
test_filtering (tests.test_filters.FilterTests.test_filtering) ... ok
----------------------------------------------------------------------
test_filtering_exclude (tests.test_filters.FilterTests.test_filtering_exclude) ... ok
----------------------------------------------------------------------
test_filtering_skipped_with_blank_value (tests.test_filters.FilterTests.test_filtering_skipped_with_blank_value) ... ok
----------------------------------------------------------------------
test_filtering_skipped_with_none_value (tests.test_filters.FilterTests.test_filtering_skipped_with_none_value) ... ok
----------------------------------------------------------------------
test_filtering_uses_distinct (tests.test_filters.FilterTests.test_filtering_uses_distinct) ... ok
----------------------------------------------------------------------
test_filtering_uses_name (tests.test_filters.FilterTests.test_filtering_uses_name) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.IsoDateTimeFromToRangeFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_filtering_ignores_lookup_expr (tests.test_filters.IsoDateTimeFromToRangeFilterTests.test_filtering_ignores_lookup_expr) ... ok
----------------------------------------------------------------------
test_filtering_range (tests.test_filters.IsoDateTimeFromToRangeFilterTests.test_filtering_range) ... ok
----------------------------------------------------------------------
test_filtering_skipped_with_none_value (tests.test_filters.IsoDateTimeFromToRangeFilterTests.test_filtering_skipped_with_none_value) ... ok
----------------------------------------------------------------------
test_filtering_start (tests.test_filters.IsoDateTimeFromToRangeFilterTests.test_filtering_start) ... ok
----------------------------------------------------------------------
test_filtering_stop (tests.test_filters.IsoDateTimeFromToRangeFilterTests.test_filtering_stop) ... ok
----------------------------------------------------------------------
test_filtering (tests.test_filters.LookupChoiceFilterTests.test_filtering) ... ok
----------------------------------------------------------------------
test_lookup_choices_default (tests.test_filters.LookupChoiceFilterTests.test_lookup_choices_default) ... ok
----------------------------------------------------------------------
test_lookup_choices_empty_label_default (tests.test_filters.LookupChoiceFilterTests.test_lookup_choices_empty_label_default) ... ok
----------------------------------------------------------------------
test_lookup_choices_empty_label_disabled (tests.test_filters.LookupChoiceFilterTests.test_lookup_choices_empty_label_disabled) ... ok
----------------------------------------------------------------------
test_lookup_choices_list (tests.test_filters.LookupChoiceFilterTests.test_lookup_choices_list) ... ok
----------------------------------------------------------------------
test_lookup_choices_pairs (tests.test_filters.LookupChoiceFilterTests.test_lookup_choices_pairs) ... ok
----------------------------------------------------------------------
test_normalize_lookup_no_display_label (tests.test_filters.LookupChoiceFilterTests.test_normalize_lookup_no_display_label) ... ok
----------------------------------------------------------------------
test_normalize_lookup_with_display_label (tests.test_filters.LookupChoiceFilterTests.test_normalize_lookup_with_display_label) ... ok
----------------------------------------------------------------------
test_callable_queryset (tests.test_filters.ModelChoiceFilterTests.test_callable_queryset) ... ok
----------------------------------------------------------------------
test_default_field_with_queryset (tests.test_filters.ModelChoiceFilterTests.test_default_field_with_queryset) ... ok
----------------------------------------------------------------------
test_default_field_without_queryset (tests.test_filters.ModelChoiceFilterTests.test_default_field_without_queryset) ... ok
----------------------------------------------------------------------
test_empty_choices (tests.test_filters.ModelChoiceFilterTests.test_empty_choices) ... ok
(0.003) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_get_queryset_override (tests.test_filters.ModelChoiceFilterTests.test_get_queryset_override) ... ok
----------------------------------------------------------------------
test_callable_queryset (tests.test_filters.ModelMultipleChoiceFilterTests.test_callable_queryset) ... ok
----------------------------------------------------------------------
test_default_field_with_queryset (tests.test_filters.ModelMultipleChoiceFilterTests.test_default_field_with_queryset) ... ok
----------------------------------------------------------------------
test_default_field_without_queryset (tests.test_filters.ModelMultipleChoiceFilterTests.test_default_field_without_queryset) ... ok
----------------------------------------------------------------------
test_empty_choices (tests.test_filters.ModelMultipleChoiceFilterTests.test_empty_choices) ... ok
(0.006) db.tests_user.aggregate([{'$match': {'$expr': {}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_filtering_to_field_name (tests.test_filters.ModelMultipleChoiceFilterTests.test_filtering_to_field_name) ... ok
(0.008) db.tests_user.insert_many([{'username': '', 'first_name': 'Firstname', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.003) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$first_name', 'Firstname']}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}])
(0.003) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$first_name', 'Firstname']}}}, {'$group': {'_id': {'_id': '$_id', 'username': '$username', 'first_name': '$first_name', 'last_name': '$last_name', 'status': '$status', 'is_active': '$is_active', 'is_employed': '$is_employed'}}}, {'$project': {'_id': '$_id._id', 'username': '$_id.username', 'first_name': '$_id.first_name', 'last_name': '$_id.last_name', 'status': '$_id.status', 'is_active': '$_id.is_active', 'is_employed': '$_id.is_employed'}}])
----------------------------------------------------------------------
test_imports (tests.test_filters.ModuleImportTests.test_imports) ... ok
----------------------------------------------------------------------
test_conjoined_default_value (tests.test_filters.MultipleChoiceFilterTests.test_conjoined_default_value) ... ok
----------------------------------------------------------------------
test_conjoined_true (tests.test_filters.MultipleChoiceFilterTests.test_conjoined_true) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.MultipleChoiceFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_filter_conjoined_true (tests.test_filters.MultipleChoiceFilterTests.test_filter_conjoined_true)
Tests that a filter with `conjoined=True` returns objects that ... ok
(0.003) db.tests_book.insert_many([{'title': '', 'price': Decimal128('1'), 'average_rating': 1.0}])
(0.001) db.tests_book.insert_many([{'title': '', 'price': Decimal128('1'), 'average_rating': 1.0}])
(0.000) db.tests_book.insert_many([{'title': '', 'price': Decimal128('1'), 'average_rating': 1.0}])
(0.000) db.tests_book.insert_many([{'title': '', 'price': Decimal128('1'), 'average_rating': 1.0}])
(0.000) db.tests_book.insert_many([{'title': '', 'price': Decimal128('1'), 'average_rating': 1.0}])
(0.000) db.tests_book.insert_many([{'title': '', 'price': Decimal128('1'), 'average_rating': 1.0}])
(0.000) db.tests_user.insert_many([{'username': '', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.000) db.tests_user.insert_many([{'username': '', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.000) db.tests_user.insert_many([{'username': '', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.000) db.tests_user.insert_many([{'username': '', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.000) db.tests_user.insert_many([{'username': '', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1c272359784306ab7ea'), ObjectId('67ddc1c272359784306ab7e9')]]}, {'$eq': ['$user_id', ObjectId('67ddc1c272359784306ab7ef')]}]}}}, {'$project': {'book_id': 1}}])
(0.000) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1c272359784306ab7ef'), 'book_id': ObjectId('67ddc1c272359784306ab7ea')}, {'user_id': ObjectId('67ddc1c272359784306ab7ef'), 'book_id': ObjectId('67ddc1c272359784306ab7e9')}])
(0.000) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1c272359784306ab7eb'), ObjectId('67ddc1c272359784306ab7ea'), ObjectId('67ddc1c272359784306ab7e9')]]}, {'$eq': ['$user_id', ObjectId('67ddc1c272359784306ab7f0')]}]}}}, {'$project': {'book_id': 1}}])
(0.000) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1c272359784306ab7f0'), 'book_id': ObjectId('67ddc1c272359784306ab7eb')}, {'user_id': ObjectId('67ddc1c272359784306ab7f0'), 'book_id': ObjectId('67ddc1c272359784306ab7ea')}, {'user_id': ObjectId('67ddc1c272359784306ab7f0'), 'book_id': ObjectId('67ddc1c272359784306ab7e9')}])
(0.000) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1c272359784306ab7eb'), ObjectId('67ddc1c272359784306ab7ea')]]}, {'$eq': ['$user_id', ObjectId('67ddc1c272359784306ab7f1')]}]}}}, {'$project': {'book_id': 1}}])
(0.000) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1c272359784306ab7f1'), 'book_id': ObjectId('67ddc1c272359784306ab7eb')}, {'user_id': ObjectId('67ddc1c272359784306ab7f1'), 'book_id': ObjectId('67ddc1c272359784306ab7ea')}])
(0.000) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1c272359784306ab7eb'), ObjectId('67ddc1c272359784306ab7ec')]]}, {'$eq': ['$user_id', ObjectId('67ddc1c272359784306ab7f2')]}]}}}, {'$project': {'book_id': 1}}])
(0.000) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1c272359784306ab7f2'), 'book_id': ObjectId('67ddc1c272359784306ab7eb')}, {'user_id': ObjectId('67ddc1c272359784306ab7f2'), 'book_id': ObjectId('67ddc1c272359784306ab7ec')}])
(0.000) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1c272359784306ab7ed'), ObjectId('67ddc1c272359784306ab7ee')]]}, {'$eq': ['$user_id', ObjectId('67ddc1c272359784306ab7f3')]}]}}}, {'$project': {'book_id': 1}}])
(0.000) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1c272359784306ab7f3'), 'book_id': ObjectId('67ddc1c272359784306ab7ed')}, {'user_id': ObjectId('67ddc1c272359784306ab7f3'), 'book_id': ObjectId('67ddc1c272359784306ab7ee')}])
(0.001) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1c272359784306ab7e9')]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1c272359784306ab7ea')]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1c272359784306ab7eb')]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1c272359784306ab7ec')]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.006) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1c272359784306ab7ed')]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.008) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'T4'}}, {'$unwind': '$T4'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1c272359784306ab7ea')]}, {'$eq': ['$T4.book_id', ObjectId('67ddc1c272359784306ab7e9')]}]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.005) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'T4'}}, {'$unwind': '$T4'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1c272359784306ab7eb')]}, {'$eq': ['$T4.book_id', ObjectId('67ddc1c272359784306ab7e9')]}]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.005) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'T4'}}, {'$unwind': '$T4'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1c272359784306ab7eb')]}, {'$eq': ['$T4.book_id', ObjectId('67ddc1c272359784306ab7ea')]}]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.005) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'T4'}}, {'$unwind': '$T4'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1c272359784306ab7eb')]}, {'$eq': ['$T4.book_id', ObjectId('67ddc1c272359784306ab7ec')]}]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.005) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'T4'}}, {'$unwind': '$T4'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1c272359784306ab7ed')]}, {'$eq': ['$T4.book_id', ObjectId('67ddc1c272359784306ab7ee')]}]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.005) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'T4'}}, {'$unwind': '$T4'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1c272359784306ab7ec')]}, {'$eq': ['$T4.book_id', ObjectId('67ddc1c272359784306ab7ed')]}]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
----------------------------------------------------------------------
test_filtering (tests.test_filters.MultipleChoiceFilterTests.test_filtering) ... ok
----------------------------------------------------------------------
test_filtering_exclude (tests.test_filters.MultipleChoiceFilterTests.test_filtering_exclude) ... ok
----------------------------------------------------------------------
test_filtering_on_required_skipped_when_len_of_value_is_len_of_field_choices (tests.test_filters.MultipleChoiceFilterTests.test_filtering_on_required_skipped_when_len_of_value_is_len_of_field_choices) ... ok
----------------------------------------------------------------------
test_filtering_requires_name (tests.test_filters.MultipleChoiceFilterTests.test_filtering_requires_name) ... ok
----------------------------------------------------------------------
test_filtering_skipped_with_empty_list_value_and_some_choices (tests.test_filters.MultipleChoiceFilterTests.test_filtering_skipped_with_empty_list_value_and_some_choices) ... ok
----------------------------------------------------------------------
test_filtering_with_lookup_expr (tests.test_filters.MultipleChoiceFilterTests.test_filtering_with_lookup_expr) ... ok
----------------------------------------------------------------------
test_is_noop_false (tests.test_filters.MultipleChoiceFilterTests.test_is_noop_false) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.NumberFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_filtering (tests.test_filters.NumberFilterTests.test_filtering) ... ok
----------------------------------------------------------------------
test_filtering_exclude (tests.test_filters.NumberFilterTests.test_filtering_exclude) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.NumericRangeFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_field_with_lookup_expr (tests.test_filters.NumericRangeFilterTests.test_field_with_lookup_expr) ... ok
----------------------------------------------------------------------
test_filtering (tests.test_filters.NumericRangeFilterTests.test_filtering) ... ok
----------------------------------------------------------------------
test_filtering_distinct (tests.test_filters.NumericRangeFilterTests.test_filtering_distinct) ... ok
----------------------------------------------------------------------
test_filtering_endswith (tests.test_filters.NumericRangeFilterTests.test_filtering_endswith) ... ok
----------------------------------------------------------------------
test_filtering_exclude (tests.test_filters.NumericRangeFilterTests.test_filtering_exclude) ... ok
----------------------------------------------------------------------
test_filtering_skipped_with_none_value (tests.test_filters.NumericRangeFilterTests.test_filtering_skipped_with_none_value) ... ok
----------------------------------------------------------------------
test_filtering_startswith (tests.test_filters.NumericRangeFilterTests.test_filtering_startswith) ... ok
----------------------------------------------------------------------
test_zero_to_zero (tests.test_filters.NumericRangeFilterTests.test_zero_to_zero) ... ok
----------------------------------------------------------------------
test_choices_from_fields (tests.test_filters.OrderingFilterTests.test_choices_from_fields) ... ok
----------------------------------------------------------------------
test_choices_unaltered (tests.test_filters.OrderingFilterTests.test_choices_unaltered) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.OrderingFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_field_labels (tests.test_filters.OrderingFilterTests.test_field_labels) ... ok
----------------------------------------------------------------------
test_field_labels_descending (tests.test_filters.OrderingFilterTests.test_field_labels_descending) ... ok
----------------------------------------------------------------------
test_filtering (tests.test_filters.OrderingFilterTests.test_filtering) ... ok
----------------------------------------------------------------------
test_filtering_descending (tests.test_filters.OrderingFilterTests.test_filtering_descending) ... ok
----------------------------------------------------------------------
test_filtering_skipped_with_none_value (tests.test_filters.OrderingFilterTests.test_filtering_skipped_with_none_value) ... ok
----------------------------------------------------------------------
test_filtering_with_fields (tests.test_filters.OrderingFilterTests.test_filtering_with_fields) ... ok
----------------------------------------------------------------------
test_help_text (tests.test_filters.OrderingFilterTests.test_help_text) ... ok
----------------------------------------------------------------------
test_normalize_fields (tests.test_filters.OrderingFilterTests.test_normalize_fields) ... ok
----------------------------------------------------------------------
test_translation_default_label (tests.test_filters.OrderingFilterTests.test_translation_default_label) ... ok
----------------------------------------------------------------------
test_translation_override_label (tests.test_filters.OrderingFilterTests.test_translation_override_label) ... ok
----------------------------------------------------------------------
test_translation_sanity (tests.test_filters.OrderingFilterTests.test_translation_sanity) ... ok
----------------------------------------------------------------------
test_widget (tests.test_filters.OrderingFilterTests.test_widget) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.RangeFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_filtering_distinct (tests.test_filters.RangeFilterTests.test_filtering_distinct) ... ok
----------------------------------------------------------------------
test_filtering_exclude (tests.test_filters.RangeFilterTests.test_filtering_exclude) ... ok
----------------------------------------------------------------------
test_filtering_ignores_lookup_expr (tests.test_filters.RangeFilterTests.test_filtering_ignores_lookup_expr) ... ok
----------------------------------------------------------------------
test_filtering_range (tests.test_filters.RangeFilterTests.test_filtering_range) ... ok
----------------------------------------------------------------------
test_filtering_skipped_with_none_value (tests.test_filters.RangeFilterTests.test_filtering_skipped_with_none_value) ... ok
----------------------------------------------------------------------
test_filtering_start (tests.test_filters.RangeFilterTests.test_filtering_start) ... ok
----------------------------------------------------------------------
test_filtering_stop (tests.test_filters.RangeFilterTests.test_filtering_stop) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.TimeFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.TimeRangeFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_filtering_ignores_lookup_expr (tests.test_filters.TimeRangeFilterTests.test_filtering_ignores_lookup_expr) ... ok
----------------------------------------------------------------------
test_filtering_range (tests.test_filters.TimeRangeFilterTests.test_filtering_range) ... ok
----------------------------------------------------------------------
test_filtering_skipped_with_none_value (tests.test_filters.TimeRangeFilterTests.test_filtering_skipped_with_none_value) ... ok
----------------------------------------------------------------------
test_filtering_start (tests.test_filters.TimeRangeFilterTests.test_filtering_start) ... ok
----------------------------------------------------------------------
test_filtering_stop (tests.test_filters.TimeRangeFilterTests.test_filtering_stop) ... ok
----------------------------------------------------------------------
test_conjoined_default_value (tests.test_filters.TypedMultipleChoiceFilterTests.test_conjoined_default_value) ... ok
----------------------------------------------------------------------
test_conjoined_true (tests.test_filters.TypedMultipleChoiceFilterTests.test_conjoined_true) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.TypedMultipleChoiceFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_filter_conjoined_true (tests.test_filters.TypedMultipleChoiceFilterTests.test_filter_conjoined_true)
Tests that a filter with `conjoined=True` returns objects that ... ok
(0.006) db.tests_book.insert_many([{'title': '', 'price': Decimal128('1'), 'average_rating': 1.0}])
(0.001) db.tests_book.insert_many([{'title': '', 'price': Decimal128('1'), 'average_rating': 1.0}])
(0.001) db.tests_book.insert_many([{'title': '', 'price': Decimal128('1'), 'average_rating': 1.0}])
(0.001) db.tests_book.insert_many([{'title': '', 'price': Decimal128('1'), 'average_rating': 1.0}])
(0.001) db.tests_book.insert_many([{'title': '', 'price': Decimal128('1'), 'average_rating': 1.0}])
(0.001) db.tests_book.insert_many([{'title': '', 'price': Decimal128('1'), 'average_rating': 1.0}])
(0.001) db.tests_user.insert_many([{'username': '', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': '', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': '', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': '', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': '', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.002) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1cc72359784306ad742'), ObjectId('67ddc1cc72359784306ad743')]]}, {'$eq': ['$user_id', ObjectId('67ddc1cc72359784306ad748')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1cc72359784306ad748'), 'book_id': ObjectId('67ddc1cc72359784306ad742')}, {'user_id': ObjectId('67ddc1cc72359784306ad748'), 'book_id': ObjectId('67ddc1cc72359784306ad743')}])
(0.001) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1cc72359784306ad744'), ObjectId('67ddc1cc72359784306ad742'), ObjectId('67ddc1cc72359784306ad743')]]}, {'$eq': ['$user_id', ObjectId('67ddc1cc72359784306ad749')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1cc72359784306ad749'), 'book_id': ObjectId('67ddc1cc72359784306ad744')}, {'user_id': ObjectId('67ddc1cc72359784306ad749'), 'book_id': ObjectId('67ddc1cc72359784306ad742')}, {'user_id': ObjectId('67ddc1cc72359784306ad749'), 'book_id': ObjectId('67ddc1cc72359784306ad743')}])
(0.002) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1cc72359784306ad744'), ObjectId('67ddc1cc72359784306ad743')]]}, {'$eq': ['$user_id', ObjectId('67ddc1cc72359784306ad74a')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1cc72359784306ad74a'), 'book_id': ObjectId('67ddc1cc72359784306ad744')}, {'user_id': ObjectId('67ddc1cc72359784306ad74a'), 'book_id': ObjectId('67ddc1cc72359784306ad743')}])
(0.003) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1cc72359784306ad744'), ObjectId('67ddc1cc72359784306ad745')]]}, {'$eq': ['$user_id', ObjectId('67ddc1cc72359784306ad74b')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1cc72359784306ad74b'), 'book_id': ObjectId('67ddc1cc72359784306ad744')}, {'user_id': ObjectId('67ddc1cc72359784306ad74b'), 'book_id': ObjectId('67ddc1cc72359784306ad745')}])
(0.002) db.tests_user_favorite_books.aggregate([{'$match': {'$expr': {'$and': [{'$in': ['$book_id', [ObjectId('67ddc1cc72359784306ad746'), ObjectId('67ddc1cc72359784306ad747')]]}, {'$eq': ['$user_id', ObjectId('67ddc1cc72359784306ad74c')]}]}}}, {'$project': {'book_id': 1}}])
(0.001) db.tests_user_favorite_books.insert_many([{'user_id': ObjectId('67ddc1cc72359784306ad74c'), 'book_id': ObjectId('67ddc1cc72359784306ad746')}, {'user_id': ObjectId('67ddc1cc72359784306ad74c'), 'book_id': ObjectId('67ddc1cc72359784306ad747')}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1cc72359784306ad742')]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1cc72359784306ad743')]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.002) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1cc72359784306ad744')]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.002) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1cc72359784306ad745')]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.003) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$match': {'$expr': {'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1cc72359784306ad746')]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.005) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'T4'}}, {'$unwind': '$T4'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1cc72359784306ad742')]}, {'$eq': ['$T4.book_id', ObjectId('67ddc1cc72359784306ad743')]}]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.005) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'T4'}}, {'$unwind': '$T4'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1cc72359784306ad744')]}, {'$eq': ['$T4.book_id', ObjectId('67ddc1cc72359784306ad742')]}]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.006) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'T4'}}, {'$unwind': '$T4'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1cc72359784306ad744')]}, {'$eq': ['$T4.book_id', ObjectId('67ddc1cc72359784306ad743')]}]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.010) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'T4'}}, {'$unwind': '$T4'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1cc72359784306ad744')]}, {'$eq': ['$T4.book_id', ObjectId('67ddc1cc72359784306ad745')]}]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.008) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'T4'}}, {'$unwind': '$T4'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1cc72359784306ad746')]}, {'$eq': ['$T4.book_id', ObjectId('67ddc1cc72359784306ad747')]}]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
(0.004) db.tests_user.aggregate([{'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'tests_user_favorite_books'}}, {'$unwind': '$tests_user_favorite_books'}, {'$lookup': {'from': 'tests_user_favorite_books', 'let': {'parent__field__0': '$_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$user_id']}]}}}], 'as': 'T4'}}, {'$unwind': '$T4'}, {'$match': {'$expr': {'$and': [{'$eq': ['$tests_user_favorite_books.book_id', ObjectId('67ddc1cc72359784306ad746')]}, {'$eq': ['$T4.book_id', ObjectId('67ddc1cc72359784306ad745')]}]}}}, {'$group': {'_id': {'_id': '$_id'}}}, {'$project': {'_id': '$_id._id'}}])
----------------------------------------------------------------------
test_filtering (tests.test_filters.TypedMultipleChoiceFilterTests.test_filtering) ... ok
----------------------------------------------------------------------
test_filtering_exclude (tests.test_filters.TypedMultipleChoiceFilterTests.test_filtering_exclude) ... ok
----------------------------------------------------------------------
test_filtering_on_required_skipped_when_len_of_value_is_len_of_field_choices (tests.test_filters.TypedMultipleChoiceFilterTests.test_filtering_on_required_skipped_when_len_of_value_is_len_of_field_choices) ... ok
----------------------------------------------------------------------
test_filtering_requires_name (tests.test_filters.TypedMultipleChoiceFilterTests.test_filtering_requires_name) ... ok
----------------------------------------------------------------------
test_filtering_skipped_with_empty_list_value_and_some_choices (tests.test_filters.TypedMultipleChoiceFilterTests.test_filtering_skipped_with_empty_list_value_and_some_choices) ... ok
----------------------------------------------------------------------
test_default_field (tests.test_filters.UUIDFilterTests.test_default_field) ... ok
----------------------------------------------------------------------
test_expected_db_fields_do_not_get_filters (tests.test_filterset.DbFieldDefaultFiltersTests.test_expected_db_fields_do_not_get_filters) ... ok
----------------------------------------------------------------------
test_expected_db_fields_get_filters (tests.test_filterset.DbFieldDefaultFiltersTests.test_expected_db_fields_get_filters) ... ok
----------------------------------------------------------------------
test_method_callable (tests.test_filterset.FilterMethodTests.test_method_callable) ... ok
----------------------------------------------------------------------
test_method_name (tests.test_filterset.FilterMethodTests.test_method_name) ... ok
----------------------------------------------------------------------
test_method_self_is_parent (tests.test_filterset.FilterMethodTests.test_method_self_is_parent) ... ok
----------------------------------------------------------------------
test_method_set_unset (tests.test_filterset.FilterMethodTests.test_method_set_unset) ... ok
----------------------------------------------------------------------
test_method_uncallable (tests.test_filterset.FilterMethodTests.test_method_uncallable) ... ok
----------------------------------------------------------------------
test_method_unresolvable (tests.test_filterset.FilterMethodTests.test_method_unresolvable) ... ok
----------------------------------------------------------------------
test_method_with_overridden_filter (tests.test_filterset.FilterMethodTests.test_method_with_overridden_filter) ... ok
----------------------------------------------------------------------
test_none (tests.test_filterset.FilterMethodTests.test_none) ... ok
----------------------------------------------------------------------
test_parent_unresolvable (tests.test_filterset.FilterMethodTests.test_parent_unresolvable) ... ok
----------------------------------------------------------------------
test_request_available_during_method_called (tests.test_filterset.FilterMethodTests.test_request_available_during_method_called) ... ok
----------------------------------------------------------------------
test_abstract_model_inheritance (tests.test_filterset.FilterSetClassCreationTests.test_abstract_model_inheritance) ... ok
----------------------------------------------------------------------
test_custom_declared_field_no_warning (tests.test_filterset.FilterSetClassCreationTests.test_custom_declared_field_no_warning) ... ok
----------------------------------------------------------------------
test_custom_field_gets_filter_from_override (tests.test_filterset.FilterSetClassCreationTests.test_custom_field_gets_filter_from_override) ... ok
----------------------------------------------------------------------
test_declared_and_model_derived (tests.test_filterset.FilterSetClassCreationTests.test_declared_and_model_derived) ... ok
----------------------------------------------------------------------
test_declared_filter_disabling (tests.test_filterset.FilterSetClassCreationTests.test_declared_filter_disabling) ... ok
----------------------------------------------------------------------
test_declared_filter_multiple_inheritance (tests.test_filterset.FilterSetClassCreationTests.test_declared_filter_multiple_inheritance) ... ok
----------------------------------------------------------------------
test_declared_filter_multiple_inheritance_field_ordering (tests.test_filterset.FilterSetClassCreationTests.test_declared_filter_multiple_inheritance_field_ordering) ... ok
----------------------------------------------------------------------
test_declaring_filter (tests.test_filterset.FilterSetClassCreationTests.test_declaring_filter) ... ok
----------------------------------------------------------------------
test_declaring_filter_other_default_lookup (tests.test_filterset.FilterSetClassCreationTests.test_declaring_filter_other_default_lookup) ... ok
----------------------------------------------------------------------
test_filterset_class_inheritance (tests.test_filterset.FilterSetClassCreationTests.test_filterset_class_inheritance) ... ok
----------------------------------------------------------------------
test_filterset_factory (tests.test_filterset.FilterSetClassCreationTests.test_filterset_factory) ... ok
----------------------------------------------------------------------
test_filterset_factory_base_filter (tests.test_filterset.FilterSetClassCreationTests.test_filterset_factory_base_filter) ... ok
----------------------------------------------------------------------
test_filterset_factory_base_filter_fields (tests.test_filterset.FilterSetClassCreationTests.test_filterset_factory_base_filter_fields) ... ok
----------------------------------------------------------------------
test_filterset_factory_base_filter_fields_and_meta_fields (tests.test_filterset.FilterSetClassCreationTests.test_filterset_factory_base_filter_fields_and_meta_fields) ... ok
----------------------------------------------------------------------
test_filterset_factory_base_filter_meta_fields (tests.test_filterset.FilterSetClassCreationTests.test_filterset_factory_base_filter_meta_fields) ... ok
----------------------------------------------------------------------
test_filterset_factory_base_filter_meta_inheritance_exclude (tests.test_filterset.FilterSetClassCreationTests.test_filterset_factory_base_filter_meta_inheritance_exclude) ... ok
----------------------------------------------------------------------
test_filterset_factory_base_filter_meta_inheritance_filter_overrides (tests.test_filterset.FilterSetClassCreationTests.test_filterset_factory_base_filter_meta_inheritance_filter_overrides) ... ok
----------------------------------------------------------------------
test_filterset_factory_fields (tests.test_filterset.FilterSetClassCreationTests.test_filterset_factory_fields) ... ok
----------------------------------------------------------------------
test_filterset_for_mti_model (tests.test_filterset.FilterSetClassCreationTests.test_filterset_for_mti_model) ... ok
----------------------------------------------------------------------
test_filterset_for_proxy_model (tests.test_filterset.FilterSetClassCreationTests.test_filterset_for_proxy_model) ... ok
----------------------------------------------------------------------
test_meta_exclude_with_declared_and_declared_wins (tests.test_filterset.FilterSetClassCreationTests.test_meta_exclude_with_declared_and_declared_wins) ... ok
----------------------------------------------------------------------
test_meta_exclude_with_no_fields (tests.test_filterset.FilterSetClassCreationTests.test_meta_exclude_with_no_fields) ... ok
----------------------------------------------------------------------
test_meta_fields_and_exclude_and_exclude_wins (tests.test_filterset.FilterSetClassCreationTests.test_meta_fields_and_exclude_and_exclude_wins) ... ok
----------------------------------------------------------------------
test_meta_fields_containing_autofield (tests.test_filterset.FilterSetClassCreationTests.test_meta_fields_containing_autofield) ... ok
----------------------------------------------------------------------
test_meta_fields_dict_containing_declarative_alias (tests.test_filterset.FilterSetClassCreationTests.test_meta_fields_dict_containing_declarative_alias) ... ok
----------------------------------------------------------------------
test_meta_fields_dict_containing_unknown_fields (tests.test_filterset.FilterSetClassCreationTests.test_meta_fields_dict_containing_unknown_fields) ... ok
----------------------------------------------------------------------
test_meta_fields_dictionary_autofield (tests.test_filterset.FilterSetClassCreationTests.test_meta_fields_dictionary_autofield) ... ok
----------------------------------------------------------------------
test_meta_fields_dictionary_derived (tests.test_filterset.FilterSetClassCreationTests.test_meta_fields_dictionary_derived) ... ok
----------------------------------------------------------------------
test_meta_fields_dictionary_derived_other_default_lookup (tests.test_filterset.FilterSetClassCreationTests.test_meta_fields_dictionary_derived_other_default_lookup) ... ok
----------------------------------------------------------------------
test_meta_fields_invalid_lookup (tests.test_filterset.FilterSetClassCreationTests.test_meta_fields_invalid_lookup) ... ok
----------------------------------------------------------------------
test_meta_fields_list_containing_unknown_fields (tests.test_filterset.FilterSetClassCreationTests.test_meta_fields_list_containing_unknown_fields) ... ok
----------------------------------------------------------------------
test_meta_fields_with_declared_and_model_derived (tests.test_filterset.FilterSetClassCreationTests.test_meta_fields_with_declared_and_model_derived) ... ok
----------------------------------------------------------------------
test_model_derived (tests.test_filterset.FilterSetClassCreationTests.test_model_derived) ... ok
----------------------------------------------------------------------
test_model_derived_other_default_lookup (tests.test_filterset.FilterSetClassCreationTests.test_model_derived_other_default_lookup) ... ok
----------------------------------------------------------------------
test_model_exclude_empty (tests.test_filterset.FilterSetClassCreationTests.test_model_exclude_empty) ... ok
----------------------------------------------------------------------
test_model_fields_empty (tests.test_filterset.FilterSetClassCreationTests.test_model_fields_empty) ... ok
----------------------------------------------------------------------
test_model_no_fields_or_exclude (tests.test_filterset.FilterSetClassCreationTests.test_model_no_fields_or_exclude) ... ok
----------------------------------------------------------------------
test_no_filters (tests.test_filterset.FilterSetClassCreationTests.test_no_filters) ... ok
----------------------------------------------------------------------
test_transforms_other_default_lookup (tests.test_filterset.FilterSetClassCreationTests.test_transforms_other_default_lookup) ... ok
----------------------------------------------------------------------
test_field_that_is_subclassed (tests.test_filterset.FilterSetFilterForFieldTests.test_field_that_is_subclassed) ... ok
----------------------------------------------------------------------
test_field_with_choices (tests.test_filterset.FilterSetFilterForFieldTests.test_field_with_choices) ... ok
----------------------------------------------------------------------
test_field_with_extras (tests.test_filterset.FilterSetFilterForFieldTests.test_field_with_extras) ... ok
----------------------------------------------------------------------
test_filter_found_for_autofield (tests.test_filterset.FilterSetFilterForFieldTests.test_filter_found_for_autofield) ... ok
----------------------------------------------------------------------
test_filter_found_for_field (tests.test_filterset.FilterSetFilterForFieldTests.test_filter_found_for_field) ... ok
----------------------------------------------------------------------
test_filter_found_for_uuidfield (tests.test_filterset.FilterSetFilterForFieldTests.test_filter_found_for_uuidfield) ... ok
----------------------------------------------------------------------
test_filter_overrides (tests.test_filterset.FilterSetFilterForFieldTests.test_filter_overrides) ... skipped 'todo'
----------------------------------------------------------------------
test_m2m_field_with_through_model (tests.test_filterset.FilterSetFilterForFieldTests.test_m2m_field_with_through_model) ... ok
----------------------------------------------------------------------
test_modified_default_lookup (tests.test_filterset.FilterSetFilterForFieldTests.test_modified_default_lookup) ... ok
----------------------------------------------------------------------
test_non_symmetrical_selfref_m2m_field (tests.test_filterset.FilterSetFilterForFieldTests.test_non_symmetrical_selfref_m2m_field) ... ok
----------------------------------------------------------------------
test_return_none (tests.test_filterset.FilterSetFilterForFieldTests.test_return_none) ... ok
----------------------------------------------------------------------
test_symmetrical_selfref_m2m_field (tests.test_filterset.FilterSetFilterForFieldTests.test_symmetrical_selfref_m2m_field) ... ok
----------------------------------------------------------------------
test_transformed_lookup_expr (tests.test_filterset.FilterSetFilterForFieldTests.test_transformed_lookup_expr) ... ok
----------------------------------------------------------------------
test_unknown_field_type_error (tests.test_filterset.FilterSetFilterForFieldTests.test_unknown_field_type_error) ... ok
----------------------------------------------------------------------
test_filter_for_IN_lookup (tests.test_filterset.FilterSetFilterForLookupTests.test_filter_for_IN_lookup) ... ok
----------------------------------------------------------------------
test_filter_for_ISNULL_lookup (tests.test_filterset.FilterSetFilterForLookupTests.test_filter_for_ISNULL_lookup) ... ok
----------------------------------------------------------------------
test_filter_for_RANGE_lookup (tests.test_filterset.FilterSetFilterForLookupTests.test_filter_for_RANGE_lookup) ... ok
----------------------------------------------------------------------
test_isnull_with_filter_overrides (tests.test_filterset.FilterSetFilterForLookupTests.test_isnull_with_filter_overrides) ... ok
----------------------------------------------------------------------
test_creating_bound_instance (tests.test_filterset.FilterSetInstantiationTests.test_creating_bound_instance) ... ok
----------------------------------------------------------------------
test_creating_instance (tests.test_filterset.FilterSetInstantiationTests.test_creating_instance) ... ok
----------------------------------------------------------------------
test_creating_with_no_data_default (tests.test_filterset.FilterSetInstantiationTests.test_creating_with_no_data_default) ... ok
----------------------------------------------------------------------
test_creating_with_queryset (tests.test_filterset.FilterSetInstantiationTests.test_creating_with_queryset) ... ok
----------------------------------------------------------------------
test_creating_with_request (tests.test_filterset.FilterSetInstantiationTests.test_creating_with_request) ... ok
----------------------------------------------------------------------
test_filter_queryset_called_once (tests.test_filterset.FilterSetQuerysetTests.test_filter_queryset_called_once) ... ok
----------------------------------------------------------------------
test_filters_must_return_queryset (tests.test_filterset.FilterSetQuerysetTests.test_filters_must_return_queryset) ... ok
----------------------------------------------------------------------
test_form_caching (tests.test_filterset.FilterSetQuerysetTests.test_form_caching) ... ok
----------------------------------------------------------------------
test_get_form_class_called_once (tests.test_filterset.FilterSetQuerysetTests.test_get_form_class_called_once) ... ok
----------------------------------------------------------------------
test_qs_caching (tests.test_filterset.FilterSetQuerysetTests.test_qs_caching) ... ok
----------------------------------------------------------------------
test_qs_triggers_form_validation (tests.test_filterset.FilterSetQuerysetTests.test_qs_triggers_form_validation) ... ok
----------------------------------------------------------------------
test_raise_unknown_field_behavior (tests.test_filterset.HandleUnknownFieldTests.test_raise_unknown_field_behavior) ... ok
----------------------------------------------------------------------
test_unknown_field_ignore_behavior (tests.test_filterset.HandleUnknownFieldTests.test_unknown_field_ignore_behavior) ... ok
----------------------------------------------------------------------
test_unknown_field_invalid_changed_option_behavior (tests.test_filterset.HandleUnknownFieldTests.test_unknown_field_invalid_changed_option_behavior) ... ok
----------------------------------------------------------------------
test_unknown_field_invalid_initial_behavior (tests.test_filterset.HandleUnknownFieldTests.test_unknown_field_invalid_initial_behavior) ... ok
----------------------------------------------------------------------
test_unknown_field_warn_behavior (tests.test_filterset.HandleUnknownFieldTests.test_unknown_field_warn_behavior) ... ok
----------------------------------------------------------------------
test_filters_for_model (tests.test_filterset.HelperMethodsTests.test_filters_for_model) ... skipped 'todo'
----------------------------------------------------------------------
test_get_declared_filters (tests.test_filterset.HelperMethodsTests.test_get_declared_filters) ... skipped 'todo'
----------------------------------------------------------------------
test_no__getitem__ (tests.test_filterset.MiscFilterSetTests.test_no__getitem__) ... ok
----------------------------------------------------------------------
test_no_qs_proxying (tests.test_filterset.MiscFilterSetTests.test_no_qs_proxying) ... ok
----------------------------------------------------------------------
test_reverse_fk_relationship (tests.test_filterset.ReverseFilterSetFilterForFieldTests.test_reverse_fk_relationship) ... ok
----------------------------------------------------------------------
test_reverse_m2m_field_with_through_model (tests.test_filterset.ReverseFilterSetFilterForFieldTests.test_reverse_m2m_field_with_through_model) ... ok
----------------------------------------------------------------------
test_reverse_m2m_relationship (tests.test_filterset.ReverseFilterSetFilterForFieldTests.test_reverse_m2m_relationship) ... ok
----------------------------------------------------------------------
test_reverse_non_symmetrical_selfref_m2m_field (tests.test_filterset.ReverseFilterSetFilterForFieldTests.test_reverse_non_symmetrical_selfref_m2m_field) ... ok
----------------------------------------------------------------------
test_reverse_o2o_relationship (tests.test_filterset.ReverseFilterSetFilterForFieldTests.test_reverse_o2o_relationship) ... ok
----------------------------------------------------------------------
test_reverse_relationship_lookup_expr (tests.test_filterset.ReverseFilterSetFilterForFieldTests.test_reverse_relationship_lookup_expr) ... ok
----------------------------------------------------------------------
test_complex_form_fields (tests.test_forms.FilterSetFormTests.test_complex_form_fields) ... ok
----------------------------------------------------------------------
test_custom_form (tests.test_forms.FilterSetFormTests.test_custom_form) ... ok
----------------------------------------------------------------------
test_disabled_help_text (tests.test_forms.FilterSetFormTests.test_disabled_help_text) ... ok
----------------------------------------------------------------------
test_filter_with_initial (tests.test_forms.FilterSetFormTests.test_filter_with_initial) ... ok
----------------------------------------------------------------------
test_form (tests.test_forms.FilterSetFormTests.test_form) ... ok
----------------------------------------------------------------------
test_form_field_with_custom_label (tests.test_forms.FilterSetFormTests.test_form_field_with_custom_label) ... ok
----------------------------------------------------------------------
test_form_field_with_manual_name (tests.test_forms.FilterSetFormTests.test_form_field_with_manual_name) ... ok
----------------------------------------------------------------------
test_form_field_with_manual_name_and_label (tests.test_forms.FilterSetFormTests.test_form_field_with_manual_name_and_label) ... ok
----------------------------------------------------------------------
test_form_fields (tests.test_forms.FilterSetFormTests.test_form_fields) ... ok
----------------------------------------------------------------------
test_form_fields_exclusion (tests.test_forms.FilterSetFormTests.test_form_fields_exclusion) ... ok
----------------------------------------------------------------------
test_form_fields_using_widget (tests.test_forms.FilterSetFormTests.test_form_fields_using_widget) ... ok
----------------------------------------------------------------------
test_form_from_empty_filterset (tests.test_forms.FilterSetFormTests.test_form_from_empty_filterset) ... ok
----------------------------------------------------------------------
test_form_is_bound (tests.test_forms.FilterSetFormTests.test_form_is_bound) ... ok
----------------------------------------------------------------------
test_form_is_not_bound (tests.test_forms.FilterSetFormTests.test_form_is_not_bound) ... ok
----------------------------------------------------------------------
test_form_prefix (tests.test_forms.FilterSetFormTests.test_form_prefix) ... ok
----------------------------------------------------------------------
test_limit_choices_to (tests.test_forms.FilterSetFormTests.test_limit_choices_to) ... ok
(0.006) db.tests_user.insert_many([{'username': 'inactive', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'active', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': True, 'is_employed': False}])
(0.001) db.tests_user.insert_many([{'username': 'manager', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}])
(0.002) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$is_active', True]}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$is_active', True]}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$status', 1]}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': True}}, ['missing', 'null']]}, 'then': None, 'else': 1}}}, '_id': None}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
(0.001) db.tests_user.aggregate([{'$match': {'$expr': {'$eq': ['$status', 1]}}}])
----------------------------------------------------------------------
test_is_bound_and_not_valid (tests.test_forms.FilterSetValidityTests.test_is_bound_and_not_valid) ... ok
----------------------------------------------------------------------
test_is_bound_and_valid (tests.test_forms.FilterSetValidityTests.test_is_bound_and_valid) ... ok
----------------------------------------------------------------------
test_not_bound (tests.test_forms.FilterSetValidityTests.test_not_bound) ... ok
----------------------------------------------------------------------
test_number_filter_max_value_validation (tests.test_forms.FilterSetValidityTests.test_number_filter_max_value_validation) ... ok
----------------------------------------------------------------------
test_field (tests.test_utils.GetFieldPartsTests.test_field) ... ok
----------------------------------------------------------------------
test_forwards_related_field (tests.test_utils.GetFieldPartsTests.test_forwards_related_field) ... ok
----------------------------------------------------------------------
test_lazy_relationship_not_ready (tests.test_utils.GetFieldPartsTests.test_lazy_relationship_not_ready)
This simulates trying to create a FilterSet before the app registry has ... ok
----------------------------------------------------------------------
test_non_existent_field (tests.test_utils.GetFieldPartsTests.test_non_existent_field) ... ok
----------------------------------------------------------------------
test_reverse_related_field (tests.test_utils.GetFieldPartsTests.test_reverse_related_field) ... ok
----------------------------------------------------------------------
test_non_existent_field (tests.test_utils.GetModelFieldTests.test_non_existent_field) ... ok
----------------------------------------------------------------------
test_related_field (tests.test_utils.GetModelFieldTests.test_related_field) ... ok
----------------------------------------------------------------------
test_handle_dst_ending (tests.test_utils.HandleTimezone.test_handle_dst_ending) ... skipped 'is_dst removed in Django 5.0'
----------------------------------------------------------------------
test_handle_dst_starting (tests.test_utils.HandleTimezone.test_handle_dst_starting) ... skipped 'is_dst removed in Django 5.0'
----------------------------------------------------------------------
test_exact_lookup (tests.test_utils.LabelForFilterTests.test_exact_lookup) ... ok
----------------------------------------------------------------------
test_exclusion_label (tests.test_utils.LabelForFilterTests.test_exclusion_label) ... ok
----------------------------------------------------------------------
test_field_all_caps (tests.test_utils.LabelForFilterTests.test_field_all_caps) ... ok
----------------------------------------------------------------------
test_related_model (tests.test_utils.LabelForFilterTests.test_related_model) ... ok
----------------------------------------------------------------------
test_related_model_exclusion (tests.test_utils.LabelForFilterTests.test_related_model_exclusion) ... ok
----------------------------------------------------------------------
test_standard_label (tests.test_utils.LabelForFilterTests.test_standard_label) ... ok
----------------------------------------------------------------------
test_message (tests.test_utils.MigrationNoticeTests.test_message) ... ok
----------------------------------------------------------------------
test_class_accessor_warnings (tests.test_utils.RenameAttributesBaseTests.test_class_accessor_warnings) ... ok
----------------------------------------------------------------------
test_class_creation_warnings (tests.test_utils.RenameAttributesBaseTests.test_class_creation_warnings) ... ok
----------------------------------------------------------------------
test_class_instance_values (tests.test_utils.RenameAttributesBaseTests.test_class_instance_values) ... ok
----------------------------------------------------------------------
test_getter_reachable (tests.test_utils.RenameAttributesBaseTests.test_getter_reachable) ... ok
----------------------------------------------------------------------
test_instance_accessor_warnings (tests.test_utils.RenameAttributesBaseTests.test_instance_accessor_warnings) ... ok
----------------------------------------------------------------------
test_parent_getter_reachable (tests.test_utils.RenameAttributesBaseTests.test_parent_getter_reachable) ... ok
----------------------------------------------------------------------
test_renamed_attribute_in_class_dict (tests.test_utils.RenameAttributesBaseTests.test_renamed_attribute_in_class_dict) ... ok
----------------------------------------------------------------------
test_setter_reachable (tests.test_utils.RenameAttributesBaseTests.test_setter_reachable) ... ok
----------------------------------------------------------------------
test_invalid_lookup_expression (tests.test_utils.ResolveFieldTests.test_invalid_lookup_expression) ... ok
----------------------------------------------------------------------
test_invalid_transformed_lookup_expression (tests.test_utils.ResolveFieldTests.test_invalid_transformed_lookup_expression) ... ok
----------------------------------------------------------------------
test_resolve_forward_related_lookups (tests.test_utils.ResolveFieldTests.test_resolve_forward_related_lookups)
Check that lookups can be resolved for related fields ... ok
----------------------------------------------------------------------
test_resolve_implicit_exact_lookup (tests.test_utils.ResolveFieldTests.test_resolve_implicit_exact_lookup) ... ok
----------------------------------------------------------------------
test_resolve_plain_lookups (tests.test_utils.ResolveFieldTests.test_resolve_plain_lookups)
Check that the standard query terms can be correctly resolved. ... ok
----------------------------------------------------------------------
test_resolve_reverse_related_lookups (tests.test_utils.ResolveFieldTests.test_resolve_reverse_related_lookups)
Check that lookups can be resolved for related fields ... ok
----------------------------------------------------------------------
test_resolve_transformed_lookups (tests.test_utils.ResolveFieldTests.test_resolve_transformed_lookups)
Check that chained field transforms are correctly resolved. ... ok
----------------------------------------------------------------------
test_error_detail (tests.test_utils.TranslateValidationDataTests.test_error_detail) ... ok
----------------------------------------------------------------------
test_full_error_details (tests.test_utils.TranslateValidationDataTests.test_full_error_details) ... ok
----------------------------------------------------------------------
test_backwards_fk (tests.test_utils.VerboseFieldNameTests.test_backwards_fk) ... ok
----------------------------------------------------------------------
test_backwards_related_field (tests.test_utils.VerboseFieldNameTests.test_backwards_related_field) ... ok
----------------------------------------------------------------------
test_backwards_related_field_multi_word (tests.test_utils.VerboseFieldNameTests.test_backwards_related_field_multi_word) ... ok
----------------------------------------------------------------------
test_field (tests.test_utils.VerboseFieldNameTests.test_field) ... ok
----------------------------------------------------------------------
test_field_all_caps (tests.test_utils.VerboseFieldNameTests.test_field_all_caps) ... ok
----------------------------------------------------------------------
test_field_with_verbose_name (tests.test_utils.VerboseFieldNameTests.test_field_with_verbose_name) ... ok
----------------------------------------------------------------------
test_forwards_fk (tests.test_utils.VerboseFieldNameTests.test_forwards_fk) ... ok
----------------------------------------------------------------------
test_forwards_related_field (tests.test_utils.VerboseFieldNameTests.test_forwards_related_field) ... ok
----------------------------------------------------------------------
test_invalid_name (tests.test_utils.VerboseFieldNameTests.test_invalid_name) ... ok
----------------------------------------------------------------------
test_lazy_text (tests.test_utils.VerboseFieldNameTests.test_lazy_text) ... ok
----------------------------------------------------------------------
test_none (tests.test_utils.VerboseFieldNameTests.test_none) ... ok
----------------------------------------------------------------------
test_exact (tests.test_utils.VerboseLookupExprTests.test_exact) ... ok
----------------------------------------------------------------------
test_missing_keys (tests.test_utils.VerboseLookupExprTests.test_missing_keys) ... ok
----------------------------------------------------------------------
test_overridden_settings (tests.test_utils.VerboseLookupExprTests.test_overridden_settings) ... ok
----------------------------------------------------------------------
test_verbose_expression (tests.test_utils.VerboseLookupExprTests.test_verbose_expression) ... ok
----------------------------------------------------------------------
test_view (tests.test_views.GenericClassBasedViewTests.test_view) ... ok
(0.004) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.aggregate([{'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_view_filtering_on_title (tests.test_views.GenericClassBasedViewTests.test_view_filtering_on_title) ... ok
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.aggregate([{'$match': {'$expr': {'$eq': ['$title', 'Snowcrash']}}}])
----------------------------------------------------------------------
test_view_with_bad_filterset (tests.test_views.GenericClassBasedViewTests.test_view_with_bad_filterset) ... ok
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
----------------------------------------------------------------------
test_view_with_filterset_not_model (tests.test_views.GenericClassBasedViewTests.test_view_with_filterset_not_model) ... ok
(0.002) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.aggregate([{'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_view_with_model_and_fields_no_filterset (tests.test_views.GenericClassBasedViewTests.test_view_with_model_and_fields_no_filterset) ... ok
(0.002) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.aggregate([{'$match': {'$expr': {'$eq': ['$price', Decimal128('1.0')]}}}])
(0.000) db.tests_book.aggregate([{'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_view_with_model_no_filterset (tests.test_views.GenericClassBasedViewTests.test_view_with_model_no_filterset) ... ok
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.aggregate([{'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_view_with_non_strict_errors (tests.test_views.GenericClassBasedViewTests.test_view_with_non_strict_errors) ... ok
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.aggregate([{'$match': {'$expr': {'$eq': ['$title', 'Snowcrash']}}}])
----------------------------------------------------------------------
test_view_with_strict_errors (tests.test_views.GenericClassBasedViewTests.test_view_with_strict_errors) ... ok
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
----------------------------------------------------------------------
test_view_with_unbound_filter_form_returns_initial_queryset (tests.test_views.GenericClassBasedViewTests.test_view_with_unbound_filter_form_returns_initial_queryset) ... ok
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.aggregate([{'$match': {'$expr': {'$eq': ['$title', 'Snowcrash']}}}])
----------------------------------------------------------------------
test_view_without_filterset_or_model (tests.test_views.GenericClassBasedViewTests.test_view_without_filterset_or_model) ... ok
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
----------------------------------------------------------------------
test_view (tests.test_views.GenericFunctionalViewTests.test_view) ... ok
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.aggregate([{'$match': {'$expr': {}}}])
----------------------------------------------------------------------
test_view_filtering_on_price (tests.test_views.GenericFunctionalViewTests.test_view_filtering_on_price) ... ok
(0.001) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}])
(0.000) db.tests_book.aggregate([{'$match': {'$expr': {'$eq': ['$title', 'Snowcrash']}}}])
----------------------------------------------------------------------
test_surrogate_class (tests.test_widgets.BaseCSVWidgetTests.test_surrogate_class) ... ok
----------------------------------------------------------------------
test_surrogate_instance (tests.test_widgets.BaseCSVWidgetTests.test_surrogate_instance) ... ok
----------------------------------------------------------------------
test_widget_render (tests.test_widgets.BaseCSVWidgetTests.test_widget_render) ... ok
----------------------------------------------------------------------
test_widget_value_from_datadict (tests.test_widgets.BaseCSVWidgetTests.test_widget_value_from_datadict) ... ok
----------------------------------------------------------------------
test_widget_render (tests.test_widgets.BooleanWidgetTests.test_widget_render) ... ok
----------------------------------------------------------------------
test_widget_value_from_datadict (tests.test_widgets.BooleanWidgetTests.test_widget_value_from_datadict) ... ok
----------------------------------------------------------------------
test_widget (tests.test_widgets.CSVSelectTests.test_widget) ... ok
----------------------------------------------------------------------
test_widget_render (tests.test_widgets.CSVWidgetTests.test_widget_render) ... ok
----------------------------------------------------------------------
test_widget (tests.test_widgets.LinkWidgetTests.test_widget) ... ok
----------------------------------------------------------------------
test_widget_value_from_datadict (tests.test_widgets.LinkWidgetTests.test_widget_value_from_datadict) ... ok
----------------------------------------------------------------------
test_widget_with_blank_choice (tests.test_widgets.LinkWidgetTests.test_widget_with_blank_choice) ... ok
----------------------------------------------------------------------
test_widget_with_empty_querydict (tests.test_widgets.LinkWidgetTests.test_widget_with_empty_querydict) ... ok
----------------------------------------------------------------------
test_widget_with_option_groups (tests.test_widgets.LinkWidgetTests.test_widget_with_option_groups) ... ok
----------------------------------------------------------------------
test_widget_without_choices (tests.test_widgets.LinkWidgetTests.test_widget_without_choices) ... ok
----------------------------------------------------------------------
test_widget_render (tests.test_widgets.LookupTypeWidgetTests.test_widget_render) ... ok
----------------------------------------------------------------------
test_widget_requires_field (tests.test_widgets.LookupTypeWidgetTests.test_widget_requires_field) ... ok
----------------------------------------------------------------------
test_widget_value_from_datadict (tests.test_widgets.QueryArrayWidgetTests.test_widget_value_from_datadict) ... ok
----------------------------------------------------------------------
test_widget (tests.test_widgets.RangeWidgetTests.test_widget) ... ok
----------------------------------------------------------------------
test_widget_attributes (tests.test_widgets.RangeWidgetTests.test_widget_attributes) ... ok
----------------------------------------------------------------------
test_assertions (tests.test_widgets.SuffixedMultiWidgetTests.test_assertions) ... ok
----------------------------------------------------------------------
test_decompress_value_none (tests.test_widgets.SuffixedMultiWidgetTests.test_decompress_value_none) ... ok
----------------------------------------------------------------------
test_render (tests.test_widgets.SuffixedMultiWidgetTests.test_render) ... ok
----------------------------------------------------------------------
test_replace_name (tests.test_widgets.SuffixedMultiWidgetTests.test_replace_name) ... ok
----------------------------------------------------------------------
test_value_from_datadict (tests.test_widgets.SuffixedMultiWidgetTests.test_value_from_datadict) ... ok
----------------------------------------------------------------------
test_value_omitted_from_data (tests.test_widgets.SuffixedMultiWidgetTests.test_value_omitted_from_data) ... ok
----------------------------------------------------------------------

======================================================================
ERROR: test_default_ordering (tests.rest_framework.test_integration.DjangoFilterOrderingTests.test_default_ordering)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-filter/tests/rest_framework/test_integration.py", line 421, in test_default_ordering
    response = view(request)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/generic/base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 515, in dispatch
    response = self.handle_exception(exc)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 475, in handle_exception
    self.raise_uncaught_exception(exc)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 486, in raise_uncaught_exception
    raise exc
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 512, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/generics.py", line 203, in get
    return self.list(request, *args, **kwargs)
           ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/mixins.py", line 46, in list
    return Response(serializer.data)
                    ^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 797, in data
    ret = super().data
          ^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 251, in data
    self._data = self.to_representation(self.instance)
                 ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 716, in to_representation
    self.child.to_representation(item) for item in iterable
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 540, in to_representation
    ret[field.field_name] = field.to_representation(attribute)
                            ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/fields.py", line 921, in to_representation
    return int(value)
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'ObjectId'

----------------------------------------------------------------------
(0.004) db.drf_test_app_djangofilterorderingmodel.insert_many([{'date': datetime.datetime(2012, 10, 8, 0, 0), 'text': 'abc'}]) (0.001) db.drf_test_app_djangofilterorderingmodel.insert_many([{'date': datetime.datetime(2013, 10, 8, 0, 0), 'text': 'bcd'}]) (0.001) db.drf_test_app_djangofilterorderingmodel.insert_many([{'date': datetime.datetime(2014, 10, 8, 0, 0), 'text': 'cde'}]) (0.001) db.drf_test_app_djangofilterorderingmodel.aggregate([{'$match': {'$expr': {}}}, {'$addFields': {'date': '$date'}}, {'$sort': SON([('date', -1)])}])
======================================================================
ERROR: test_get_filtered_detail_view (tests.rest_framework.test_integration.IntegrationTestDetailFiltering.test_get_filtered_detail_view)
GET requests to filtered RetrieveAPIView that have a filterset_class
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-filter/tests/rest_framework/test_integration.py", line 352, in test_get_filtered_detail_view
    response = self.client.get(self._get_url(item))
                               ~~~~~~~~~~~~~^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-filter/tests/rest_framework/test_integration.py", line 341, in _get_url
    return reverse("detail-view", kwargs=dict(pk=item.pk))
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/urls/base.py", line 88, in reverse
    return resolver._reverse_with_prefix(view, prefix, *args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/urls/resolvers.py", line 831, in _reverse_with_prefix
    raise NoReverseMatch(msg)
django.urls.exceptions.NoReverseMatch: Reverse for 'detail-view' with keyword arguments '{'pk': ObjectId('67ddc19672359784306a3236')}' not found. 1 pattern(s) tried: ['(?P<pk>[0-9]+)/\\Z']

----------------------------------------------------------------------
(0.006) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a3236'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a3238'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a323a'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a323c'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a323e'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a3240'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a3242'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a3244'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a3246'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a3248'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}]) (0.004) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}]) (0.002) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}, {'$limit': 1}])
======================================================================
ERROR: test_base_model_filter (tests.rest_framework.test_integration.IntegrationTestFiltering.test_base_model_filter)
The `get_filterset_class` model checks should allow base model filters.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-filter/tests/rest_framework/test_integration.py", line 277, in test_base_model_filter
    response = view(request).render()
               ~~~~^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/generic/base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 515, in dispatch
    response = self.handle_exception(exc)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 475, in handle_exception
    self.raise_uncaught_exception(exc)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 486, in raise_uncaught_exception
    raise exc
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 512, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/generics.py", line 243, in get
    return self.list(request, *args, **kwargs)
           ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/mixins.py", line 46, in list
    return Response(serializer.data)
                    ^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 797, in data
    ret = super().data
          ^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 251, in data
    self._data = self.to_representation(self.instance)
                 ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 716, in to_representation
    self.child.to_representation(item) for item in iterable
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 540, in to_representation
    ret[field.field_name] = field.to_representation(attribute)
                            ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/fields.py", line 921, in to_representation
    return int(value)
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'ObjectId'

----------------------------------------------------------------------
(0.007) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32e1'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32e3'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32e5'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32e7'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}]) (0.002) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32e9'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32eb'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32ed'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32ef'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32f1'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19672359784306a32f3'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}]) (0.004) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}]) (0.007) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {'$eq': ['$drf_test_app_basefilterableitem.text', 'aaa']}}}])
======================================================================
ERROR: test_filter_with_get_queryset_only (tests.rest_framework.test_integration.IntegrationTestFiltering.test_filter_with_get_queryset_only)
Regression test for #834.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-filter/tests/rest_framework/test_integration.py", line 202, in test_filter_with_get_queryset_only
    view(request).render()
    ~~~~^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/generic/base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 515, in dispatch
    response = self.handle_exception(exc)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 475, in handle_exception
    self.raise_uncaught_exception(exc)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 486, in raise_uncaught_exception
    raise exc
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 512, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/generics.py", line 243, in get
    return self.list(request, *args, **kwargs)
           ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/mixins.py", line 46, in list
    return Response(serializer.data)
                    ^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 797, in data
    ret = super().data
          ^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 251, in data
    self._data = self.to_representation(self.instance)
                 ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 716, in to_representation
    self.child.to_representation(item) for item in iterable
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 540, in to_representation
    ret[field.field_name] = field.to_representation(attribute)
                            ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/fields.py", line 921, in to_representation
    return int(value)
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'ObjectId'

----------------------------------------------------------------------
(0.005) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a338c'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a338e'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3390'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3392'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3394'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3396'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3398'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}]) (0.003) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a339a'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a339c'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a339e'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}]) (0.003) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}]) (0.004) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
======================================================================
ERROR: test_filter_with_queryset (tests.rest_framework.test_integration.IntegrationTestFiltering.test_filter_with_queryset)
Regression test for #814.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-filter/tests/rest_framework/test_integration.py", line 189, in test_filter_with_queryset
    response = view(request).render()
               ~~~~^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/generic/base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 515, in dispatch
    response = self.handle_exception(exc)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 475, in handle_exception
    self.raise_uncaught_exception(exc)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 486, in raise_uncaught_exception
    raise exc
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 512, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/generics.py", line 243, in get
    return self.list(request, *args, **kwargs)
           ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/mixins.py", line 46, in list
    return Response(serializer.data)
                    ^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 797, in data
    ret = super().data
          ^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 251, in data
    self._data = self.to_representation(self.instance)
                 ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 716, in to_representation
    self.child.to_representation(item) for item in iterable
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 540, in to_representation
    ret[field.field_name] = field.to_representation(attribute)
                            ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/fields.py", line 921, in to_representation
    return int(value)
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'ObjectId'

----------------------------------------------------------------------
(0.006) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3437'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3439'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a343b'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a343d'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a343f'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3441'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3443'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3445'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3447'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3449'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}]) (0.002) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}]) (0.001) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {'$eq': ['$decimal', Decimal128('2.25')]}}}])
======================================================================
ERROR: test_get_filtered_class_root_view (tests.rest_framework.test_integration.IntegrationTestFiltering.test_get_filtered_class_root_view)
GET requests to filtered ListCreateAPIView that have a filterset_class set
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-filter/tests/rest_framework/test_integration.py", line 215, in test_get_filtered_class_root_view
    response = view(request).render()
               ~~~~^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/generic/base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 515, in dispatch
    response = self.handle_exception(exc)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 475, in handle_exception
    self.raise_uncaught_exception(exc)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 486, in raise_uncaught_exception
    raise exc
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 512, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/generics.py", line 243, in get
    return self.list(request, *args, **kwargs)
           ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/mixins.py", line 46, in list
    return Response(serializer.data)
                    ^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 797, in data
    ret = super().data
          ^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 251, in data
    self._data = self.to_representation(self.instance)
                 ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 716, in to_representation
    self.child.to_representation(item) for item in iterable
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 540, in to_representation
    ret[field.field_name] = field.to_representation(attribute)
                            ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/fields.py", line 921, in to_representation
    return int(value)
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'ObjectId'

----------------------------------------------------------------------
(0.004) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34e2'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34e4'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34e6'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34e8'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34ea'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34ec'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34ee'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34f0'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34f2'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a34f4'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}]) (0.003) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}]) (0.002) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
======================================================================
ERROR: test_get_filtered_fields_root_view (tests.rest_framework.test_integration.IntegrationTestFiltering.test_get_filtered_fields_root_view)
GET requests to paginated ListCreateAPIView should return paginated results.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-filter/tests/rest_framework/test_integration.py", line 156, in test_get_filtered_fields_root_view
    response = view(request).render()
               ~~~~^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/generic/base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 515, in dispatch
    response = self.handle_exception(exc)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 475, in handle_exception
    self.raise_uncaught_exception(exc)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 486, in raise_uncaught_exception
    raise exc
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 512, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/generics.py", line 243, in get
    return self.list(request, *args, **kwargs)
           ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/mixins.py", line 46, in list
    return Response(serializer.data)
                    ^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 797, in data
    ret = super().data
          ^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 251, in data
    self._data = self.to_representation(self.instance)
                 ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 716, in to_representation
    self.child.to_representation(item) for item in iterable
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 540, in to_representation
    ret[field.field_name] = field.to_representation(attribute)
                            ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/fields.py", line 921, in to_representation
    return int(value)
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'ObjectId'

----------------------------------------------------------------------
(0.007) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a358d'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a358f'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3591'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}]) (0.002) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3593'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3595'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}]) (0.002) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3597'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3599'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a359b'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a359d'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a359f'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}]) (0.003) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}]) (0.003) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
======================================================================
ERROR: test_html_rendering (tests.rest_framework.test_integration.IntegrationTestFiltering.test_html_rendering)
Make sure response renders w/ backend
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-filter/tests/rest_framework/test_integration.py", line 299, in test_html_rendering
    response = view(request).render()
               ~~~~^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/generic/base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 515, in dispatch
    response = self.handle_exception(exc)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 475, in handle_exception
    self.raise_uncaught_exception(exc)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 486, in raise_uncaught_exception
    raise exc
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 512, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/generics.py", line 243, in get
    return self.list(request, *args, **kwargs)
           ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/mixins.py", line 46, in list
    return Response(serializer.data)
                    ^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 797, in data
    ret = super().data
          ^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 251, in data
    self._data = self.to_representation(self.instance)
                 ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 716, in to_representation
    self.child.to_representation(item) for item in iterable
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 540, in to_representation
    ret[field.field_name] = field.to_representation(attribute)
                            ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/fields.py", line 921, in to_representation
    return int(value)
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'ObjectId'

----------------------------------------------------------------------
(0.004) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3638'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a363a'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a363c'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a363e'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3640'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3642'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3644'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3646'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a3648'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19772359784306a364a'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}]) (0.003) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}]) (0.003) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
======================================================================
ERROR: test_permissive (tests.rest_framework.test_integration.IntegrationTestFiltering.test_permissive)
Permissive handling should return a partially filtered result set.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-filter/tests/rest_framework/test_integration.py", line 328, in test_permissive
    response = view(request).render()
               ~~~~^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/generic/base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 515, in dispatch
    response = self.handle_exception(exc)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 475, in handle_exception
    self.raise_uncaught_exception(exc)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 486, in raise_uncaught_exception
    raise exc
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 512, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/generics.py", line 243, in get
    return self.list(request, *args, **kwargs)
           ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/mixins.py", line 46, in list
    return Response(serializer.data)
                    ^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 797, in data
    ret = super().data
          ^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 251, in data
    self._data = self.to_representation(self.instance)
                 ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 716, in to_representation
    self.child.to_representation(item) for item in iterable
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 540, in to_representation
    ret[field.field_name] = field.to_representation(attribute)
                            ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/fields.py", line 921, in to_representation
    return int(value)
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'ObjectId'

----------------------------------------------------------------------
(0.004) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a378e'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}]) (0.003) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a3790'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a3792'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a3794'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a3796'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a3798'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a379a'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a379c'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a379e'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}]) (0.000) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a37a0'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}]) (0.004) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': ''}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a37a2'), 'decimal': Decimal128('1.23'), 'date': datetime.datetime(2017, 1, 1, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': ''}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a37a4'), 'decimal': Decimal128('1.23'), 'date': datetime.datetime(2016, 1, 1, 0, 0)}]) (0.002) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {'$eq': ['$date', datetime.datetime(2017, 1, 1, 0, 0)]}}}])
======================================================================
ERROR: test_unknown_filter (tests.rest_framework.test_integration.IntegrationTestFiltering.test_unknown_filter)
GET requests with filters that aren't configured should return 200.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-filter/tests/rest_framework/test_integration.py", line 289, in test_unknown_filter
    response = view(request).render()
               ~~~~^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/views/generic/base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 515, in dispatch
    response = self.handle_exception(exc)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 475, in handle_exception
    self.raise_uncaught_exception(exc)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 486, in raise_uncaught_exception
    raise exc
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/views.py", line 512, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/generics.py", line 243, in get
    return self.list(request, *args, **kwargs)
           ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/mixins.py", line 46, in list
    return Response(serializer.data)
                    ^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 797, in data
    ret = super().data
          ^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 251, in data
    self._data = self.to_representation(self.instance)
                 ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 716, in to_representation
    self.child.to_representation(item) for item in iterable
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/serializers.py", line 540, in to_representation
    ret[field.field_name] = field.to_representation(attribute)
                            ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-rest-framework/rest_framework/fields.py", line 921, in to_representation
    return int(value)
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'ObjectId'

----------------------------------------------------------------------
(0.005) db.drf_test_app_basefilterableitem.insert_many([{'text': 'aaa'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38e8'), 'decimal': Decimal128('0.25'), 'date': datetime.datetime(2012, 10, 8, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'bbb'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38ea'), 'decimal': Decimal128('1.25'), 'date': datetime.datetime(2012, 10, 6, 0, 0)}]) (0.002) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ccc'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38ec'), 'decimal': Decimal128('2.25'), 'date': datetime.datetime(2012, 10, 4, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ddd'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38ee'), 'decimal': Decimal128('3.25'), 'date': datetime.datetime(2012, 10, 2, 0, 0)}]) (0.003) db.drf_test_app_basefilterableitem.insert_many([{'text': 'eee'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38f0'), 'decimal': Decimal128('4.25'), 'date': datetime.datetime(2012, 9, 30, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'fff'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38f2'), 'decimal': Decimal128('5.25'), 'date': datetime.datetime(2012, 9, 28, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'ggg'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38f4'), 'decimal': Decimal128('6.25'), 'date': datetime.datetime(2012, 9, 26, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'hhh'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38f6'), 'decimal': Decimal128('7.25'), 'date': datetime.datetime(2012, 9, 24, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'iii'}]) (0.001) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38f8'), 'decimal': Decimal128('8.25'), 'date': datetime.datetime(2012, 9, 22, 0, 0)}]) (0.001) db.drf_test_app_basefilterableitem.insert_many([{'text': 'jjj'}]) (0.000) db.drf_test_app_filterableitem.insert_many([{'basefilterableitem_ptr_id': ObjectId('67ddc19872359784306a38fa'), 'decimal': Decimal128('9.25'), 'date': datetime.datetime(2012, 9, 20, 0, 0)}]) (0.004) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}]) (0.003) db.drf_test_app_filterableitem.aggregate([{'$lookup': {'from': 'drf_test_app_basefilterableitem', 'let': {'parent__field__0': '$basefilterableitem_ptr_id'}, 'pipeline': [{'$match': {'$expr': {'$and': [{'$eq': ['$$parent__field__0', '$_id']}]}}}], 'as': 'drf_test_app_basefilterableitem'}}, {'$unwind': '$drf_test_app_basefilterableitem'}, {'$match': {'$expr': {}}}])
======================================================================
ERROR: test_filtering (tests.test_filtering.ChoiceFilterTests.test_filtering)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/test/testcases.py", line 360, in _setup_and_call
    self._pre_setup()
    ~~~~~~~~~~~~~~~^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/test/testcases.py", line 1128, in _pre_setup
    self._fixture_setup()
    ~~~~~~~~~~~~~~~~~~~^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/test/testcases.py", line 1433, in _fixture_setup
    self.setUpTestData()
    ~~~~~~~~~~~~~~~~~~^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-filter/tests/test_filtering.py", line 135, in setUpTestData
    Article.objects.create(author_id=1, published=now())
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/query.py", line 679, in create
    obj.save(force_insert=True, using=self.db)
    ~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 892, in save
    self.save_base(
    ~~~~~~~~~~~~~~^
        using=using,
        ^^^^^^^^^^^^
    ...<2 lines>...
        update_fields=update_fields,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 998, in save_base
    updated = self._save_table(
        raw,
    ...<4 lines>...
        update_fields,
    )
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 1161, in _save_table
    results = self._do_insert(
        cls._base_manager, using, fields, returning_fields, raw
    )
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 1202, in _do_insert
    return manager._insert(
           ~~~~~~~~~~~~~~~^
        [self],
        ^^^^^^^
    ...<3 lines>...
        raw=raw,
        ^^^^^^^^
    )
    ^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/query.py", line 1847, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-mongodb-backend/django_mongodb_backend/compiler.py", line 665, in execute_sql
    value = field.get_db_prep_save(
        getattr(obj, field.attname)
    ...<2 lines>...
        connection=self.connection,
    )
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/fields/related.py", line 1142, in get_db_prep_save
    return self.target_field.get_db_prep_save(value, connection=connection)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/fields/__init__.py", line 1011, in get_db_prep_save
    return self.get_db_prep_value(value, connection=connection, prepared=False)
           ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/fields/__init__.py", line 2818, in get_db_prep_value
    value = self.get_prep_value(value)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-mongodb-backend/django_mongodb_backend/fields/auto.py", line 25, in get_prep_value
    return self.to_python(value)
           ~~~~~~~~~~~~~~^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-mongodb-backend/django_mongodb_backend/fields/objectid.py", line 31, in to_python
    raise exceptions.ValidationError(
    ...<3 lines>...
    ) from None
django.core.exceptions.ValidationError: ['“1” is not a valid Object Id.']

----------------------------------------------------------------------
(0.005) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}]) (0.001) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}]) (0.001) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}]) (0.001) db.tests_book.aggregate([{'$match': {'$expr': {}}}]) (0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$eq': ['$title', 'Snowcrash']}}}])
======================================================================
ERROR: test_filtering_on_empty_choice (tests.test_filtering.ChoiceFilterTests.test_filtering_on_empty_choice)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/test/testcases.py", line 360, in _setup_and_call
    self._pre_setup()
    ~~~~~~~~~~~~~~~^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/test/testcases.py", line 1128, in _pre_setup
    self._fixture_setup()
    ~~~~~~~~~~~~~~~~~~~^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/test/testcases.py", line 1433, in _fixture_setup
    self.setUpTestData()
    ~~~~~~~~~~~~~~~~~~^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-filter/tests/test_filtering.py", line 135, in setUpTestData
    Article.objects.create(author_id=1, published=now())
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/query.py", line 679, in create
    obj.save(force_insert=True, using=self.db)
    ~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 892, in save
    self.save_base(
    ~~~~~~~~~~~~~~^
        using=using,
        ^^^^^^^^^^^^
    ...<2 lines>...
        update_fields=update_fields,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 998, in save_base
    updated = self._save_table(
        raw,
    ...<4 lines>...
        update_fields,
    )
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 1161, in _save_table
    results = self._do_insert(
        cls._base_manager, using, fields, returning_fields, raw
    )
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 1202, in _do_insert
    return manager._insert(
           ~~~~~~~~~~~~~~~^
        [self],
        ^^^^^^^
    ...<3 lines>...
        raw=raw,
        ^^^^^^^^
    )
    ^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/query.py", line 1847, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-mongodb-backend/django_mongodb_backend/compiler.py", line 665, in execute_sql
    value = field.get_db_prep_save(
        getattr(obj, field.attname)
    ...<2 lines>...
        connection=self.connection,
    )
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/fields/related.py", line 1142, in get_db_prep_save
    return self.target_field.get_db_prep_save(value, connection=connection)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/fields/__init__.py", line 1011, in get_db_prep_save
    return self.get_db_prep_value(value, connection=connection, prepared=False)
           ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/fields/__init__.py", line 2818, in get_db_prep_value
    value = self.get_prep_value(value)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-mongodb-backend/django_mongodb_backend/fields/auto.py", line 25, in get_prep_value
    return self.to_python(value)
           ~~~~~~~~~~~~~~^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-mongodb-backend/django_mongodb_backend/fields/objectid.py", line 31, in to_python
    raise exceptions.ValidationError(
    ...<3 lines>...
    ) from None
django.core.exceptions.ValidationError: ['“1” is not a valid Object Id.']

----------------------------------------------------------------------
(0.005) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}]) (0.001) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}]) (0.001) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}]) (0.001) db.tests_book.aggregate([{'$match': {'$expr': {}}}]) (0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$eq': ['$title', 'Snowcrash']}}}])
======================================================================
ERROR: test_filtering_on_explicitly_defined_field (tests.test_filtering.ChoiceFilterTests.test_filtering_on_explicitly_defined_field)
Test for #30.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/test/testcases.py", line 360, in _setup_and_call
    self._pre_setup()
    ~~~~~~~~~~~~~~~^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/test/testcases.py", line 1128, in _pre_setup
    self._fixture_setup()
    ~~~~~~~~~~~~~~~~~~~^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/test/testcases.py", line 1433, in _fixture_setup
    self.setUpTestData()
    ~~~~~~~~~~~~~~~~~~^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-filter/tests/test_filtering.py", line 135, in setUpTestData
    Article.objects.create(author_id=1, published=now())
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/query.py", line 679, in create
    obj.save(force_insert=True, using=self.db)
    ~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 892, in save
    self.save_base(
    ~~~~~~~~~~~~~~^
        using=using,
        ^^^^^^^^^^^^
    ...<2 lines>...
        update_fields=update_fields,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 998, in save_base
    updated = self._save_table(
        raw,
    ...<4 lines>...
        update_fields,
    )
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 1161, in _save_table
    results = self._do_insert(
        cls._base_manager, using, fields, returning_fields, raw
    )
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 1202, in _do_insert
    return manager._insert(
           ~~~~~~~~~~~~~~~^
        [self],
        ^^^^^^^
    ...<3 lines>...
        raw=raw,
        ^^^^^^^^
    )
    ^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/query.py", line 1847, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-mongodb-backend/django_mongodb_backend/compiler.py", line 665, in execute_sql
    value = field.get_db_prep_save(
        getattr(obj, field.attname)
    ...<2 lines>...
        connection=self.connection,
    )
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/fields/related.py", line 1142, in get_db_prep_save
    return self.target_field.get_db_prep_save(value, connection=connection)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/fields/__init__.py", line 1011, in get_db_prep_save
    return self.get_db_prep_value(value, connection=connection, prepared=False)
           ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/fields/__init__.py", line 2818, in get_db_prep_value
    value = self.get_prep_value(value)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-mongodb-backend/django_mongodb_backend/fields/auto.py", line 25, in get_prep_value
    return self.to_python(value)
           ~~~~~~~~~~~~~~^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-mongodb-backend/django_mongodb_backend/fields/objectid.py", line 31, in to_python
    raise exceptions.ValidationError(
    ...<3 lines>...
    ) from None
django.core.exceptions.ValidationError: ['“1” is not a valid Object Id.']

----------------------------------------------------------------------
(0.005) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}]) (0.001) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}]) (0.001) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}]) (0.001) db.tests_book.aggregate([{'$match': {'$expr': {}}}]) (0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$eq': ['$title', 'Snowcrash']}}}])
======================================================================
ERROR: test_filtering_on_null_choice (tests.test_filtering.ChoiceFilterTests.test_filtering_on_null_choice)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/test/testcases.py", line 360, in _setup_and_call
    self._pre_setup()
    ~~~~~~~~~~~~~~~^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/test/testcases.py", line 1128, in _pre_setup
    self._fixture_setup()
    ~~~~~~~~~~~~~~~~~~~^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/test/testcases.py", line 1433, in _fixture_setup
    self.setUpTestData()
    ~~~~~~~~~~~~~~~~~~^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-filter/tests/test_filtering.py", line 135, in setUpTestData
    Article.objects.create(author_id=1, published=now())
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/query.py", line 679, in create
    obj.save(force_insert=True, using=self.db)
    ~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 892, in save
    self.save_base(
    ~~~~~~~~~~~~~~^
        using=using,
        ^^^^^^^^^^^^
    ...<2 lines>...
        update_fields=update_fields,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 998, in save_base
    updated = self._save_table(
        raw,
    ...<4 lines>...
        update_fields,
    )
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 1161, in _save_table
    results = self._do_insert(
        cls._base_manager, using, fields, returning_fields, raw
    )
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 1202, in _do_insert
    return manager._insert(
           ~~~~~~~~~~~~~~~^
        [self],
        ^^^^^^^
    ...<3 lines>...
        raw=raw,
        ^^^^^^^^
    )
    ^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/query.py", line 1847, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-mongodb-backend/django_mongodb_backend/compiler.py", line 665, in execute_sql
    value = field.get_db_prep_save(
        getattr(obj, field.attname)
    ...<2 lines>...
        connection=self.connection,
    )
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/fields/related.py", line 1142, in get_db_prep_save
    return self.target_field.get_db_prep_save(value, connection=connection)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/fields/__init__.py", line 1011, in get_db_prep_save
    return self.get_db_prep_value(value, connection=connection, prepared=False)
           ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/fields/__init__.py", line 2818, in get_db_prep_value
    value = self.get_prep_value(value)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-mongodb-backend/django_mongodb_backend/fields/auto.py", line 25, in get_prep_value
    return self.to_python(value)
           ~~~~~~~~~~~~~~^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-mongodb-backend/django_mongodb_backend/fields/objectid.py", line 31, in to_python
    raise exceptions.ValidationError(
    ...<3 lines>...
    ) from None
django.core.exceptions.ValidationError: ['“1” is not a valid Object Id.']

----------------------------------------------------------------------
(0.005) db.tests_book.insert_many([{'title': "Ender's Game", 'price': Decimal128('1.00'), 'average_rating': 3.0}]) (0.001) db.tests_book.insert_many([{'title': 'Rainbow Six', 'price': Decimal128('1.00'), 'average_rating': 3.0}]) (0.001) db.tests_book.insert_many([{'title': 'Snowcrash', 'price': Decimal128('1.00'), 'average_rating': 3.0}]) (0.001) db.tests_book.aggregate([{'$match': {'$expr': {}}}]) (0.001) db.tests_book.aggregate([{'$match': {'$expr': {'$eq': ['$title', 'Snowcrash']}}}])
======================================================================
ERROR: test_filtering_on_null_choice (tests.test_filtering.MultipleChoiceFilterTests.test_filtering_on_null_choice)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-filter/tests/test_filtering.py", line 257, in test_filtering_on_null_choice
    Article.objects.create(author_id=1, published=now())
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/query.py", line 679, in create
    obj.save(force_insert=True, using=self.db)
    ~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 892, in save
    self.save_base(
    ~~~~~~~~~~~~~~^
        using=using,
        ^^^^^^^^^^^^
    ...<2 lines>...
        update_fields=update_fields,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 998, in save_base
    updated = self._save_table(
        raw,
    ...<4 lines>...
        update_fields,
    )
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 1161, in _save_table
    results = self._do_insert(
        cls._base_manager, using, fields, returning_fields, raw
    )
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/base.py", line 1202, in _do_insert
    return manager._insert(
           ~~~~~~~~~~~~~~~^
        [self],
        ^^^^^^^
    ...<3 lines>...
        raw=raw,
        ^^^^^^^^
    )
    ^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/query.py", line 1847, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-mongodb-backend/django_mongodb_backend/compiler.py", line 665, in execute_sql
    value = field.get_db_prep_save(
        getattr(obj, field.attname)
    ...<2 lines>...
        connection=self.connection,
    )
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/fields/related.py", line 1142, in get_db_prep_save
    return self.target_field.get_db_prep_save(value, connection=connection)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/fields/__init__.py", line 1011, in get_db_prep_save
    return self.get_db_prep_value(value, connection=connection, prepared=False)
           ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django/django/db/models/fields/__init__.py", line 2818, in get_db_prep_value
    value = self.get_prep_value(value)
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-mongodb-backend/django_mongodb_backend/fields/auto.py", line 25, in get_prep_value
    return self.to_python(value)
           ~~~~~~~~~~~~~~^^^^^^^
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-mongodb-backend/django_mongodb_backend/fields/objectid.py", line 31, in to_python
    raise exceptions.ValidationError(
    ...<3 lines>...
    ) from None
django.core.exceptions.ValidationError: ['“1” is not a valid Object Id.']

----------------------------------------------------------------------
(0.005) db.tests_user.insert_many([{'username': 'alex', 'first_name': '', 'last_name': '', 'status': 1, 'is_active': False, 'is_employed': False}]) (0.001) db.tests_user.insert_many([{'username': 'jacob', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}]) (0.001) db.tests_user.insert_many([{'username': 'aaron', 'first_name': '', 'last_name': '', 'status': 2, 'is_active': False, 'is_employed': False}]) (0.001) db.tests_user.insert_many([{'username': 'carl', 'first_name': '', 'last_name': '', 'status': 0, 'is_active': False, 'is_employed': False}])
======================================================================
FAIL: test_filtering (tests.test_filtering.CSVRangeFilterTests.test_filtering)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/alex.clark/Developer/django-mongodb-cli/src/django-filter/tests/test_filtering.py", line 1998, in test_filtering
    self.assertEqual(f.qs.count(), 0)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
AssertionError: 4 != 0

----------------------------------------------------------------------
(0.002) db.tests_article.aggregate([{'$match': {'$expr': {}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': TRUE}}, ['missing', 'null']]}, 'then': NONE, 'else': 1}}}, '_id': NONE}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}]) (0.001) db.tests_article.aggregate([{'$match': {'$expr': {}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': TRUE}}, ['missing', 'null']]}, 'then': NONE, 'else': 1}}}, '_id': NONE}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}]) (0.001) db.tests_article.aggregate([{'$match': {'$expr': {'$and': [{'$or': [{'$or': [{'$eq': [{'$type': None}, 'missing']}, {'$eq': [None, None]}]}, {'$gte': ['$published', None]}]}, {'$or': [{'$or': [{'$eq': [{'$type': None}, 'missing']}, {'$eq': [None, None]}]}, {'$lte': ['$published', None]}]}]}}}, {'$facet': {'group': [{'$group': {'__count': {'$sum': {'$cond': {'if': {'$in': [{'$type': {'$literal': TRUE}}, ['missing', 'null']]}, 'then': NONE, 'else': 1}}}, '_id': NONE}}]}}, {'$addFields': {'__count': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '__count'}}, '_id': {'$getField': {'input': {'$arrayElemAt': ['$group', 0]}, 'field': '_id'}}}}, {'$project': {'__count': {'$ifNull': ['$__count', {'$literal': 0}]}}}])
----------------------------------------------------------------------
Ran 515 tests in 83.516s

FAILED (failures=1, errors=15, skipped=16, expected failures=3)
Destroying test database for alias 'default' ('test_djangotests')...
